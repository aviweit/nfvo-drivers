/*
 * OSM NB API featuring ETSI NFV SOL005
 * This is Open Source MANO Northbound API featuring ETSI NFV SOL005. For more information on OSM, you can visit [http://osm.etsi.org](http://osm.etsi.org). You can send us your comments and questions to OSM_TECH@list.etsi.org or join the [OpenSourceMANO Slack Workplace](https://join.slack.com/t/opensourcemano/shared_invite/enQtMzQ3MzYzNTQ0NDIyLWVkNTE4ZjZjNWI0ZTQyN2VhOTI1MjViMzU1NWYwMWM3ODI4NTQyY2VlODA2ZjczMWIyYTFkZWNiZmFkM2M2ZDk) 
 *
 * OpenAPI spec version: 1.0.0
 * Contact: OSM_TECH@list.etsi.org
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package it.nextworks.osm.openapi;

import it.nextworks.osm.ApiCallback;
import it.nextworks.osm.ApiClient;
import it.nextworks.osm.ApiException;
import it.nextworks.osm.ApiResponse;
import it.nextworks.osm.Configuration;
import it.nextworks.osm.Pair;
import it.nextworks.osm.ProgressRequestBody;
import it.nextworks.osm.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.swagger.client.model.ArrayOfNetSliceInstance;
import io.swagger.client.model.ArrayOfNsiLcmOpOcc;
import io.swagger.client.model.CreateNsiContentRequest;
import io.swagger.client.model.CreateNsiContentResponse;
import io.swagger.client.model.CreateNsiRequest;
import io.swagger.client.model.InstantiateNsiRequest;
import io.swagger.client.model.NetSliceInstance;
import io.swagger.client.model.NsiActionRequest;
import io.swagger.client.model.NsiLcmOpOcc;
import io.swagger.client.model.ObjectId;
import io.swagger.client.model.ProblemDetails;
import io.swagger.client.model.TerminateNsiRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class NetSliceInstancesApi {
    private ApiClient apiClient;

    public NetSliceInstancesApi() {
        this(Configuration.getDefaultApiClient());
    }

    public NetSliceInstancesApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for actionOnNSI
     * @param netsliceInstanceId NetSlice Instance ID (required)
     * @param body  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call actionOnNSICall(String netsliceInstanceId, NsiActionRequest body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/nsilcm/v1/netslice_instances/{netsliceInstanceId}/action"
            .replaceAll("\\{" + "netsliceInstanceId" + "\\}", apiClient.escapeString(netsliceInstanceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "application/yaml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json", "application/yaml"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call actionOnNSIValidateBeforeCall(String netsliceInstanceId, NsiActionRequest body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'netsliceInstanceId' is set
        if (netsliceInstanceId == null) {
            throw new ApiException("Missing the required parameter 'netsliceInstanceId' when calling actionOnNSI(Async)");
        }
        
        com.squareup.okhttp.Call call = actionOnNSICall(netsliceInstanceId, body, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Execute an action on a NetSlice instance
     * Execute an action on a NetSlice instance. The NetSlice instance must have been created and must be in INSTANTIATED state. 
     * @param netsliceInstanceId NetSlice Instance ID (required)
     * @param body  (optional)
     * @return ObjectId
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ObjectId actionOnNSI(String netsliceInstanceId, NsiActionRequest body) throws ApiException {
        ApiResponse<ObjectId> resp = actionOnNSIWithHttpInfo(netsliceInstanceId, body);
        return resp.getData();
    }

    /**
     * Execute an action on a NetSlice instance
     * Execute an action on a NetSlice instance. The NetSlice instance must have been created and must be in INSTANTIATED state. 
     * @param netsliceInstanceId NetSlice Instance ID (required)
     * @param body  (optional)
     * @return ApiResponse&lt;ObjectId&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ObjectId> actionOnNSIWithHttpInfo(String netsliceInstanceId, NsiActionRequest body) throws ApiException {
        com.squareup.okhttp.Call call = actionOnNSIValidateBeforeCall(netsliceInstanceId, body, null, null);
        Type localVarReturnType = new TypeToken<ObjectId>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Execute an action on a NetSlice instance (asynchronously)
     * Execute an action on a NetSlice instance. The NetSlice instance must have been created and must be in INSTANTIATED state. 
     * @param netsliceInstanceId NetSlice Instance ID (required)
     * @param body  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call actionOnNSIAsync(String netsliceInstanceId, NsiActionRequest body, final ApiCallback<ObjectId> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = actionOnNSIValidateBeforeCall(netsliceInstanceId, body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ObjectId>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for addNSI
     * @param body  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call addNSICall(CreateNsiRequest body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/nsilcm/v1/netslice_instances";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "application/yaml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json", "application/yaml"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call addNSIValidateBeforeCall(CreateNsiRequest body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        com.squareup.okhttp.Call call = addNSICall(body, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Create a new NetSlice instance resource
     * Create a new NetSlice instance resource
     * @param body  (optional)
     * @return ObjectId
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ObjectId addNSI(CreateNsiRequest body) throws ApiException {
        ApiResponse<ObjectId> resp = addNSIWithHttpInfo(body);
        return resp.getData();
    }

    /**
     * Create a new NetSlice instance resource
     * Create a new NetSlice instance resource
     * @param body  (optional)
     * @return ApiResponse&lt;ObjectId&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ObjectId> addNSIWithHttpInfo(CreateNsiRequest body) throws ApiException {
        com.squareup.okhttp.Call call = addNSIValidateBeforeCall(body, null, null);
        Type localVarReturnType = new TypeToken<ObjectId>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create a new NetSlice instance resource (asynchronously)
     * Create a new NetSlice instance resource
     * @param body  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addNSIAsync(CreateNsiRequest body, final ApiCallback<ObjectId> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addNSIValidateBeforeCall(body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ObjectId>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for createNSIContent
     * @param body  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createNSIContentCall(CreateNsiContentRequest body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/nsilcm/v1/netslice_instances_content";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "application/yaml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json", "application/yaml"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createNSIContentValidateBeforeCall(CreateNsiContentRequest body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        com.squareup.okhttp.Call call = createNSIContentCall(body, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Create a new NetSlice instance
     * Create a new NetSlice instance
     * @param body  (optional)
     * @return CreateNsiContentResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CreateNsiContentResponse createNSIContent(CreateNsiContentRequest body) throws ApiException {
        ApiResponse<CreateNsiContentResponse> resp = createNSIContentWithHttpInfo(body);
        return resp.getData();
    }

    /**
     * Create a new NetSlice instance
     * Create a new NetSlice instance
     * @param body  (optional)
     * @return ApiResponse&lt;CreateNsiContentResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CreateNsiContentResponse> createNSIContentWithHttpInfo(CreateNsiContentRequest body) throws ApiException {
        com.squareup.okhttp.Call call = createNSIContentValidateBeforeCall(body, null, null);
        Type localVarReturnType = new TypeToken<CreateNsiContentResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create a new NetSlice instance (asynchronously)
     * Create a new NetSlice instance
     * @param body  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createNSIContentAsync(CreateNsiContentRequest body, final ApiCallback<CreateNsiContentResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createNSIContentValidateBeforeCall(body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CreateNsiContentResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for deleteNSI
     * @param netsliceInstanceId NetSlice Instance ID (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteNSICall(String netsliceInstanceId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/nsilcm/v1/netslice_instances/{netsliceInstanceId}"
            .replaceAll("\\{" + "netsliceInstanceId" + "\\}", apiClient.escapeString(netsliceInstanceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteNSIValidateBeforeCall(String netsliceInstanceId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'netsliceInstanceId' is set
        if (netsliceInstanceId == null) {
            throw new ApiException("Missing the required parameter 'netsliceInstanceId' when calling deleteNSI(Async)");
        }
        
        com.squareup.okhttp.Call call = deleteNSICall(netsliceInstanceId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Delete an individual NetSlice instance resource
     * Delete an individual NetSlice instance resource
     * @param netsliceInstanceId NetSlice Instance ID (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteNSI(String netsliceInstanceId) throws ApiException {
        deleteNSIWithHttpInfo(netsliceInstanceId);
    }

    /**
     * Delete an individual NetSlice instance resource
     * Delete an individual NetSlice instance resource
     * @param netsliceInstanceId NetSlice Instance ID (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteNSIWithHttpInfo(String netsliceInstanceId) throws ApiException {
        com.squareup.okhttp.Call call = deleteNSIValidateBeforeCall(netsliceInstanceId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete an individual NetSlice instance resource (asynchronously)
     * Delete an individual NetSlice instance resource
     * @param netsliceInstanceId NetSlice Instance ID (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteNSIAsync(String netsliceInstanceId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteNSIValidateBeforeCall(netsliceInstanceId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deleteNSIContent
     * @param netsliceInstanceContentId NetSlice Instance Content ID (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteNSIContentCall(String netsliceInstanceContentId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/nsilcm/v1/netslice_instances_content/{netsliceInstanceContentId}"
            .replaceAll("\\{" + "netsliceInstanceContentId" + "\\}", apiClient.escapeString(netsliceInstanceContentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "application/yaml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteNSIContentValidateBeforeCall(String netsliceInstanceContentId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'netsliceInstanceContentId' is set
        if (netsliceInstanceContentId == null) {
            throw new ApiException("Missing the required parameter 'netsliceInstanceContentId' when calling deleteNSIContent(Async)");
        }
        
        com.squareup.okhttp.Call call = deleteNSIContentCall(netsliceInstanceContentId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Delete an individual NS instance resource
     * Delete an individual NS instance resource
     * @param netsliceInstanceContentId NetSlice Instance Content ID (required)
     * @return ObjectId
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ObjectId deleteNSIContent(String netsliceInstanceContentId) throws ApiException {
        ApiResponse<ObjectId> resp = deleteNSIContentWithHttpInfo(netsliceInstanceContentId);
        return resp.getData();
    }

    /**
     * Delete an individual NS instance resource
     * Delete an individual NS instance resource
     * @param netsliceInstanceContentId NetSlice Instance Content ID (required)
     * @return ApiResponse&lt;ObjectId&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ObjectId> deleteNSIContentWithHttpInfo(String netsliceInstanceContentId) throws ApiException {
        com.squareup.okhttp.Call call = deleteNSIContentValidateBeforeCall(netsliceInstanceContentId, null, null);
        Type localVarReturnType = new TypeToken<ObjectId>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Delete an individual NS instance resource (asynchronously)
     * Delete an individual NS instance resource
     * @param netsliceInstanceContentId NetSlice Instance Content ID (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteNSIContentAsync(String netsliceInstanceContentId, final ApiCallback<ObjectId> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteNSIContentValidateBeforeCall(netsliceInstanceContentId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ObjectId>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getNSI
     * @param netsliceInstanceId NetSlice Instance ID (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getNSICall(String netsliceInstanceId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/nsilcm/v1/netslice_instances/{netsliceInstanceId}"
            .replaceAll("\\{" + "netsliceInstanceId" + "\\}", apiClient.escapeString(netsliceInstanceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "application/yaml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getNSIValidateBeforeCall(String netsliceInstanceId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'netsliceInstanceId' is set
        if (netsliceInstanceId == null) {
            throw new ApiException("Missing the required parameter 'netsliceInstanceId' when calling getNSI(Async)");
        }
        
        com.squareup.okhttp.Call call = getNSICall(netsliceInstanceId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Read an individual NetSlice instance resource
     * Read an individual NetSlice instance resource
     * @param netsliceInstanceId NetSlice Instance ID (required)
     * @return NetSliceInstance
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public NetSliceInstance getNSI(String netsliceInstanceId) throws ApiException {
        ApiResponse<NetSliceInstance> resp = getNSIWithHttpInfo(netsliceInstanceId);
        return resp.getData();
    }

    /**
     * Read an individual NetSlice instance resource
     * Read an individual NetSlice instance resource
     * @param netsliceInstanceId NetSlice Instance ID (required)
     * @return ApiResponse&lt;NetSliceInstance&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<NetSliceInstance> getNSIWithHttpInfo(String netsliceInstanceId) throws ApiException {
        com.squareup.okhttp.Call call = getNSIValidateBeforeCall(netsliceInstanceId, null, null);
        Type localVarReturnType = new TypeToken<NetSliceInstance>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Read an individual NetSlice instance resource (asynchronously)
     * Read an individual NetSlice instance resource
     * @param netsliceInstanceId NetSlice Instance ID (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getNSIAsync(String netsliceInstanceId, final ApiCallback<NetSliceInstance> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getNSIValidateBeforeCall(netsliceInstanceId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<NetSliceInstance>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getNSIContent
     * @param netsliceInstanceContentId NetSlice Instance Content ID (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getNSIContentCall(String netsliceInstanceContentId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/nsilcm/v1/netslice_instances_content/{netsliceInstanceContentId}"
            .replaceAll("\\{" + "netsliceInstanceContentId" + "\\}", apiClient.escapeString(netsliceInstanceContentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "application/yaml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getNSIContentValidateBeforeCall(String netsliceInstanceContentId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'netsliceInstanceContentId' is set
        if (netsliceInstanceContentId == null) {
            throw new ApiException("Missing the required parameter 'netsliceInstanceContentId' when calling getNSIContent(Async)");
        }
        
        com.squareup.okhttp.Call call = getNSIContentCall(netsliceInstanceContentId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Read an individual NetSlice instance resource
     * Read an individual NetSlice instance resource
     * @param netsliceInstanceContentId NetSlice Instance Content ID (required)
     * @return NetSliceInstance
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public NetSliceInstance getNSIContent(String netsliceInstanceContentId) throws ApiException {
        ApiResponse<NetSliceInstance> resp = getNSIContentWithHttpInfo(netsliceInstanceContentId);
        return resp.getData();
    }

    /**
     * Read an individual NetSlice instance resource
     * Read an individual NetSlice instance resource
     * @param netsliceInstanceContentId NetSlice Instance Content ID (required)
     * @return ApiResponse&lt;NetSliceInstance&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<NetSliceInstance> getNSIContentWithHttpInfo(String netsliceInstanceContentId) throws ApiException {
        com.squareup.okhttp.Call call = getNSIContentValidateBeforeCall(netsliceInstanceContentId, null, null);
        Type localVarReturnType = new TypeToken<NetSliceInstance>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Read an individual NetSlice instance resource (asynchronously)
     * Read an individual NetSlice instance resource
     * @param netsliceInstanceContentId NetSlice Instance Content ID (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getNSIContentAsync(String netsliceInstanceContentId, final ApiCallback<NetSliceInstance> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getNSIContentValidateBeforeCall(netsliceInstanceContentId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<NetSliceInstance>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getNSIs
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getNSIsCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/nsilcm/v1/netslice_instances";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "application/yaml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getNSIsValidateBeforeCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        com.squareup.okhttp.Call call = getNSIsCall(progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Query information about multiple NetSlice instances
     * Query information about multiple NetSlice isntances
     * @return ArrayOfNetSliceInstance
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ArrayOfNetSliceInstance getNSIs() throws ApiException {
        ApiResponse<ArrayOfNetSliceInstance> resp = getNSIsWithHttpInfo();
        return resp.getData();
    }

    /**
     * Query information about multiple NetSlice instances
     * Query information about multiple NetSlice isntances
     * @return ApiResponse&lt;ArrayOfNetSliceInstance&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ArrayOfNetSliceInstance> getNSIsWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = getNSIsValidateBeforeCall(null, null);
        Type localVarReturnType = new TypeToken<ArrayOfNetSliceInstance>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Query information about multiple NetSlice instances (asynchronously)
     * Query information about multiple NetSlice isntances
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getNSIsAsync(final ApiCallback<ArrayOfNetSliceInstance> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getNSIsValidateBeforeCall(progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ArrayOfNetSliceInstance>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getNSIsContent
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getNSIsContentCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/nsilcm/v1/netslice_instances_content";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "application/yaml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getNSIsContentValidateBeforeCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        com.squareup.okhttp.Call call = getNSIsContentCall(progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Query information about multiple NetSlice instances
     * Query information about multiple NetSlice isntances
     * @return ArrayOfNetSliceInstance
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ArrayOfNetSliceInstance getNSIsContent() throws ApiException {
        ApiResponse<ArrayOfNetSliceInstance> resp = getNSIsContentWithHttpInfo();
        return resp.getData();
    }

    /**
     * Query information about multiple NetSlice instances
     * Query information about multiple NetSlice isntances
     * @return ApiResponse&lt;ArrayOfNetSliceInstance&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ArrayOfNetSliceInstance> getNSIsContentWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = getNSIsContentValidateBeforeCall(null, null);
        Type localVarReturnType = new TypeToken<ArrayOfNetSliceInstance>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Query information about multiple NetSlice instances (asynchronously)
     * Query information about multiple NetSlice isntances
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getNSIsContentAsync(final ApiCallback<ArrayOfNetSliceInstance> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getNSIsContentValidateBeforeCall(progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ArrayOfNetSliceInstance>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getNsiLcmOpOcc
     * @param nsiLcmOpOccId NetSlice LCM Operation Occurrence ID (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getNsiLcmOpOccCall(String nsiLcmOpOccId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/nsilcm/v1/nsi_lcm_op_occs/{nsiLcmOpOccId}"
            .replaceAll("\\{" + "nsiLcmOpOccId" + "\\}", apiClient.escapeString(nsiLcmOpOccId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "application/yaml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getNsiLcmOpOccValidateBeforeCall(String nsiLcmOpOccId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'nsiLcmOpOccId' is set
        if (nsiLcmOpOccId == null) {
            throw new ApiException("Missing the required parameter 'nsiLcmOpOccId' when calling getNsiLcmOpOcc(Async)");
        }
        
        com.squareup.okhttp.Call call = getNsiLcmOpOccCall(nsiLcmOpOccId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Query information about an individual NetSlice LCM Operation Occurrence
     * Query information about an individual NetSlice LCM Operation Occurrence
     * @param nsiLcmOpOccId NetSlice LCM Operation Occurrence ID (required)
     * @return NsiLcmOpOcc
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public NsiLcmOpOcc getNsiLcmOpOcc(String nsiLcmOpOccId) throws ApiException {
        ApiResponse<NsiLcmOpOcc> resp = getNsiLcmOpOccWithHttpInfo(nsiLcmOpOccId);
        return resp.getData();
    }

    /**
     * Query information about an individual NetSlice LCM Operation Occurrence
     * Query information about an individual NetSlice LCM Operation Occurrence
     * @param nsiLcmOpOccId NetSlice LCM Operation Occurrence ID (required)
     * @return ApiResponse&lt;NsiLcmOpOcc&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<NsiLcmOpOcc> getNsiLcmOpOccWithHttpInfo(String nsiLcmOpOccId) throws ApiException {
        com.squareup.okhttp.Call call = getNsiLcmOpOccValidateBeforeCall(nsiLcmOpOccId, null, null);
        Type localVarReturnType = new TypeToken<NsiLcmOpOcc>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Query information about an individual NetSlice LCM Operation Occurrence (asynchronously)
     * Query information about an individual NetSlice LCM Operation Occurrence
     * @param nsiLcmOpOccId NetSlice LCM Operation Occurrence ID (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getNsiLcmOpOccAsync(String nsiLcmOpOccId, final ApiCallback<NsiLcmOpOcc> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getNsiLcmOpOccValidateBeforeCall(nsiLcmOpOccId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<NsiLcmOpOcc>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getNsiLcmOpOccs
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getNsiLcmOpOccsCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/nsilcm/v1/nsi_lcm_op_occs";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "application/yaml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getNsiLcmOpOccsValidateBeforeCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        com.squareup.okhttp.Call call = getNsiLcmOpOccsCall(progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Query information about multiple NetSlice LCM Operation Occurrences
     * Query information about multiple NetSlice LCM Operation Occurrences
     * @return ArrayOfNsiLcmOpOcc
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ArrayOfNsiLcmOpOcc getNsiLcmOpOccs() throws ApiException {
        ApiResponse<ArrayOfNsiLcmOpOcc> resp = getNsiLcmOpOccsWithHttpInfo();
        return resp.getData();
    }

    /**
     * Query information about multiple NetSlice LCM Operation Occurrences
     * Query information about multiple NetSlice LCM Operation Occurrences
     * @return ApiResponse&lt;ArrayOfNsiLcmOpOcc&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ArrayOfNsiLcmOpOcc> getNsiLcmOpOccsWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = getNsiLcmOpOccsValidateBeforeCall(null, null);
        Type localVarReturnType = new TypeToken<ArrayOfNsiLcmOpOcc>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Query information about multiple NetSlice LCM Operation Occurrences (asynchronously)
     * Query information about multiple NetSlice LCM Operation Occurrences
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getNsiLcmOpOccsAsync(final ApiCallback<ArrayOfNsiLcmOpOcc> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getNsiLcmOpOccsValidateBeforeCall(progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ArrayOfNsiLcmOpOcc>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for instantiateNSI
     * @param netsliceInstanceId NetSlice Instance ID (required)
     * @param body  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call instantiateNSICall(String netsliceInstanceId, InstantiateNsiRequest body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/nsilcm/v1/netslice_instances/{netsliceInstanceId}/instantiate"
            .replaceAll("\\{" + "netsliceInstanceId" + "\\}", apiClient.escapeString(netsliceInstanceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "application/yaml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json", "application/yaml"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call instantiateNSIValidateBeforeCall(String netsliceInstanceId, InstantiateNsiRequest body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'netsliceInstanceId' is set
        if (netsliceInstanceId == null) {
            throw new ApiException("Missing the required parameter 'netsliceInstanceId' when calling instantiateNSI(Async)");
        }
        
        com.squareup.okhttp.Call call = instantiateNSICall(netsliceInstanceId, body, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Instantiate a NetSlice
     * Instantiate a NetSlice. The precondition is that the NetSlice instance must have been created and must be in NOT_INSTANTIATED state. As a result of the success of this operation, the NFVO creates a \&quot;NetSlice Lifecycle Operation Occurrence\&quot; resource for the request, and the NS instance state becomes INSTANTIATED. 
     * @param netsliceInstanceId NetSlice Instance ID (required)
     * @param body  (optional)
     * @return ObjectId
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ObjectId instantiateNSI(String netsliceInstanceId, InstantiateNsiRequest body) throws ApiException {
        ApiResponse<ObjectId> resp = instantiateNSIWithHttpInfo(netsliceInstanceId, body);
        return resp.getData();
    }

    /**
     * Instantiate a NetSlice
     * Instantiate a NetSlice. The precondition is that the NetSlice instance must have been created and must be in NOT_INSTANTIATED state. As a result of the success of this operation, the NFVO creates a \&quot;NetSlice Lifecycle Operation Occurrence\&quot; resource for the request, and the NS instance state becomes INSTANTIATED. 
     * @param netsliceInstanceId NetSlice Instance ID (required)
     * @param body  (optional)
     * @return ApiResponse&lt;ObjectId&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ObjectId> instantiateNSIWithHttpInfo(String netsliceInstanceId, InstantiateNsiRequest body) throws ApiException {
        com.squareup.okhttp.Call call = instantiateNSIValidateBeforeCall(netsliceInstanceId, body, null, null);
        Type localVarReturnType = new TypeToken<ObjectId>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Instantiate a NetSlice (asynchronously)
     * Instantiate a NetSlice. The precondition is that the NetSlice instance must have been created and must be in NOT_INSTANTIATED state. As a result of the success of this operation, the NFVO creates a \&quot;NetSlice Lifecycle Operation Occurrence\&quot; resource for the request, and the NS instance state becomes INSTANTIATED. 
     * @param netsliceInstanceId NetSlice Instance ID (required)
     * @param body  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call instantiateNSIAsync(String netsliceInstanceId, InstantiateNsiRequest body, final ApiCallback<ObjectId> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = instantiateNSIValidateBeforeCall(netsliceInstanceId, body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ObjectId>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for terminateNSI
     * @param netsliceInstanceId NetSlice Instance ID (required)
     * @param body  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call terminateNSICall(String netsliceInstanceId, TerminateNsiRequest body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/nsilcm/v1/netslice_instances/{netsliceInstanceId}/terminate"
            .replaceAll("\\{" + "netsliceInstanceId" + "\\}", apiClient.escapeString(netsliceInstanceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "application/yaml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json", "application/yaml"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call terminateNSIValidateBeforeCall(String netsliceInstanceId, TerminateNsiRequest body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'netsliceInstanceId' is set
        if (netsliceInstanceId == null) {
            throw new ApiException("Missing the required parameter 'netsliceInstanceId' when calling terminateNSI(Async)");
        }
        
        com.squareup.okhttp.Call call = terminateNSICall(netsliceInstanceId, body, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Terminate a NetSlice instance
     * Terminate a NetSlice instance. The precondition is that the NetSlice instance must have been created and must be in INSTANTIATED state. As a result of the success of this operation, the NFVO creates a \&quot;NetSlice Lifecycle Operation Occurrence\&quot; resource for the request, and the NetSlice instance state becomes NOT_INSTANTIATED. 
     * @param netsliceInstanceId NetSlice Instance ID (required)
     * @param body  (optional)
     * @return ObjectId
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ObjectId terminateNSI(String netsliceInstanceId, TerminateNsiRequest body) throws ApiException {
        ApiResponse<ObjectId> resp = terminateNSIWithHttpInfo(netsliceInstanceId, body);
        return resp.getData();
    }

    /**
     * Terminate a NetSlice instance
     * Terminate a NetSlice instance. The precondition is that the NetSlice instance must have been created and must be in INSTANTIATED state. As a result of the success of this operation, the NFVO creates a \&quot;NetSlice Lifecycle Operation Occurrence\&quot; resource for the request, and the NetSlice instance state becomes NOT_INSTANTIATED. 
     * @param netsliceInstanceId NetSlice Instance ID (required)
     * @param body  (optional)
     * @return ApiResponse&lt;ObjectId&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ObjectId> terminateNSIWithHttpInfo(String netsliceInstanceId, TerminateNsiRequest body) throws ApiException {
        com.squareup.okhttp.Call call = terminateNSIValidateBeforeCall(netsliceInstanceId, body, null, null);
        Type localVarReturnType = new TypeToken<ObjectId>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Terminate a NetSlice instance (asynchronously)
     * Terminate a NetSlice instance. The precondition is that the NetSlice instance must have been created and must be in INSTANTIATED state. As a result of the success of this operation, the NFVO creates a \&quot;NetSlice Lifecycle Operation Occurrence\&quot; resource for the request, and the NetSlice instance state becomes NOT_INSTANTIATED. 
     * @param netsliceInstanceId NetSlice Instance ID (required)
     * @param body  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call terminateNSIAsync(String netsliceInstanceId, TerminateNsiRequest body, final ApiCallback<ObjectId> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = terminateNSIValidateBeforeCall(netsliceInstanceId, body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ObjectId>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
