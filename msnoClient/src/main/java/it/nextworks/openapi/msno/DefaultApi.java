/*
 * SOL005 - NS Lifecycle Management Interface
 * SOL005 - NS Lifecycle Management Interface IMPORTANT: Please note that this file might be not aligned to the current version of the ETSI Group Specification it refers to and has not been approved by the ETSI NFV ISG. In case of discrepancies the published ETSI Group Specification takes precedence. Please report bugs to https://forge.etsi.org/bugzilla/buglist.cgi?component=Nfv-Openapis 
 *
 * OpenAPI spec version: 1.1.0-impl:etsi.org:ETSI_NFV_OpenAPI:1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package it.nextworks.openapi.msno;

import it.nextworks.openapi.ApiCallback;
import it.nextworks.openapi.ApiClient;
import it.nextworks.openapi.ApiException;
import it.nextworks.openapi.ApiResponse;
import it.nextworks.openapi.Configuration;
import it.nextworks.openapi.Pair;
import it.nextworks.openapi.ProgressRequestBody;
import it.nextworks.openapi.ProgressResponseBody;
import it.nextworks.openapi.msno.model.ApiVersionInformation;
import it.nextworks.openapi.msno.model.CancelMode;
import it.nextworks.openapi.msno.model.CreateNsRequest;
import it.nextworks.openapi.msno.model.HealNsRequest;
import it.nextworks.openapi.msno.model.InlineResponse200;
import it.nextworks.openapi.msno.model.InlineResponse2001;
import it.nextworks.openapi.msno.model.InstantiateNsRequest;
import it.nextworks.openapi.msno.model.LccnSubscription;
import it.nextworks.openapi.msno.model.LccnSubscriptionRequest;
import it.nextworks.openapi.msno.model.NsInstance;
import it.nextworks.openapi.msno.model.NsInstance2;
import it.nextworks.openapi.msno.model.NsLcmOpOcc;
import it.nextworks.openapi.msno.model.ProblemDetails;
import it.nextworks.openapi.msno.model.ScaleNsRequest;
import it.nextworks.openapi.msno.model.TerminateNsRequest;
import it.nextworks.openapi.msno.model.UpdateNsRequest;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;
import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class DefaultApi {
    private ApiClient apiClient;

    public DefaultApi() {
        this(Configuration.getDefaultApiClient());
    }

    public DefaultApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for apiVersionsGet
     * @param version Version of the API requested to use when responding to this request.  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call apiVersionsGetCall(String version, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api-versions";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (version != null)
        localVarHeaderParams.put("Version", apiClient.parameterToString(version));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call apiVersionsGetValidateBeforeCall(String version, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = apiVersionsGetCall(version, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve API version information
     * The GET method reads API version information. This method shall follow the provisions specified in table 4.6.3.3.3.2-1 for request and response data structures, and response codes. URI query parameters are not supported. 
     * @param version Version of the API requested to use when responding to this request.  (optional)
     * @return ApiVersionInformation
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiVersionInformation apiVersionsGet(String version) throws ApiException {
        ApiResponse<ApiVersionInformation> resp = apiVersionsGetWithHttpInfo(version);
        return resp.getData();
    }

    /**
     * Retrieve API version information
     * The GET method reads API version information. This method shall follow the provisions specified in table 4.6.3.3.3.2-1 for request and response data structures, and response codes. URI query parameters are not supported. 
     * @param version Version of the API requested to use when responding to this request.  (optional)
     * @return ApiResponse&lt;ApiVersionInformation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ApiVersionInformation> apiVersionsGetWithHttpInfo(String version) throws ApiException {
        com.squareup.okhttp.Call call = apiVersionsGetValidateBeforeCall(version, null, null);
        Type localVarReturnType = new TypeToken<ApiVersionInformation>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve API version information (asynchronously)
     * The GET method reads API version information. This method shall follow the provisions specified in table 4.6.3.3.3.2-1 for request and response data structures, and response codes. URI query parameters are not supported. 
     * @param version Version of the API requested to use when responding to this request.  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call apiVersionsGetAsync(String version, final ApiCallback<ApiVersionInformation> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = apiVersionsGetValidateBeforeCall(version, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ApiVersionInformation>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for nsInstancesGet
     * @param version Version of the API requested to use when responding to this request.  (required)
     * @param accept Content-Types that are acceptable for the response. Reference: IETF RFC 7231  (required)
     * @param authorization The authorization token for the request. Reference: IETF RFC 7235.  (optional)
     * @param filter Attribute-based filtering expression according to clause 4.3.2. The NFVO shall support receiving this parameter as part of the URI query string. The OSS/BSS may supply this parameter. All attribute names that appear in the NsInstance and in data types referenced from it shall be supported by the NFVO in the filter expression.  (optional)
     * @param allFields Include all complex attributes in the response. See clause 4.3.3 for details. The NFVO shall support this parameter.  (optional)
     * @param fields \&quot;Complex attributes to be included into the response. See clause 4.3.3 for details. The NFVO should support this parameter.\&quot;  (optional)
     * @param excludeFields \&quot;Complex attributes to be excluded from the response. See clause 4.3.3 for details. The NFVO should support this parameter.\&quot;  (optional)
     * @param excludeDefault \&quot;Indicates to exclude the following complex attributes from the response. See clause 4.3.3 for details. The NFVO shall support this parameter. The following attributes shall be excluded from the NsInstance structure in the response body if this parameter is provided, or none of the parameters \&quot;all_fields,\&quot; \&quot;fields\&quot;, \&quot;exclude_fields\&quot;, \&quot;exclude_default\&quot; are provided: - vnfInstances - pnfInfo - virtualLinkInfo - vnffgInfo - sapInfo - nsScaleStatus - additionalAffinityOrAntiAffinityRules\&quot;  (optional)
     * @param nextpageOpaqueMarker Marker to obtain the next page of a paged response. Shall be supported by the NFVO if the NFVO supports alternative 2 (paging) according to clause 4.7.2.1 for this resource.  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call nsInstancesGetCall(String version, String accept, String authorization, String filter, String allFields, String fields, String excludeFields, String excludeDefault, String nextpageOpaqueMarker, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/ns_instances";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (filter != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("filter", filter));
        if (allFields != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("all_fields", allFields));
        if (fields != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("fields", fields));
        if (excludeFields != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("exclude_fields", excludeFields));
        if (excludeDefault != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("exclude_default", excludeDefault));
        if (nextpageOpaqueMarker != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("nextpage_opaque_marker", nextpageOpaqueMarker));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (authorization != null)
        localVarHeaderParams.put("Authorization", apiClient.parameterToString(authorization));
        if (version != null)
        localVarHeaderParams.put("Version", apiClient.parameterToString(version));
        if (accept != null)
        localVarHeaderParams.put("Accept", apiClient.parameterToString(accept));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call nsInstancesGetValidateBeforeCall(String version, String accept, String authorization, String filter, String allFields, String fields, String excludeFields, String excludeDefault, String nextpageOpaqueMarker, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling nsInstancesGet(Async)");
        }
        
        // verify the required parameter 'accept' is set
        if (accept == null) {
            throw new ApiException("Missing the required parameter 'accept' when calling nsInstancesGet(Async)");
        }
        

        com.squareup.okhttp.Call call = nsInstancesGetCall(version, accept, authorization, filter, allFields, fields, excludeFields, excludeDefault, nextpageOpaqueMarker, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Query multiple NS instances.
     * Query NS Instances. The GET method queries information about multiple NS instances. This method shall support the URI query parameters, request and response data structures, and response codes, as specified in the Tables 6.4.2.3.2-1 and 6.4.2.3.2-2. 
     * @param version Version of the API requested to use when responding to this request.  (required)
     * @param accept Content-Types that are acceptable for the response. Reference: IETF RFC 7231  (required)
     * @param authorization The authorization token for the request. Reference: IETF RFC 7235.  (optional)
     * @param filter Attribute-based filtering expression according to clause 4.3.2. The NFVO shall support receiving this parameter as part of the URI query string. The OSS/BSS may supply this parameter. All attribute names that appear in the NsInstance and in data types referenced from it shall be supported by the NFVO in the filter expression.  (optional)
     * @param allFields Include all complex attributes in the response. See clause 4.3.3 for details. The NFVO shall support this parameter.  (optional)
     * @param fields \&quot;Complex attributes to be included into the response. See clause 4.3.3 for details. The NFVO should support this parameter.\&quot;  (optional)
     * @param excludeFields \&quot;Complex attributes to be excluded from the response. See clause 4.3.3 for details. The NFVO should support this parameter.\&quot;  (optional)
     * @param excludeDefault \&quot;Indicates to exclude the following complex attributes from the response. See clause 4.3.3 for details. The NFVO shall support this parameter. The following attributes shall be excluded from the NsInstance structure in the response body if this parameter is provided, or none of the parameters \&quot;all_fields,\&quot; \&quot;fields\&quot;, \&quot;exclude_fields\&quot;, \&quot;exclude_default\&quot; are provided: - vnfInstances - pnfInfo - virtualLinkInfo - vnffgInfo - sapInfo - nsScaleStatus - additionalAffinityOrAntiAffinityRules\&quot;  (optional)
     * @param nextpageOpaqueMarker Marker to obtain the next page of a paged response. Shall be supported by the NFVO if the NFVO supports alternative 2 (paging) according to clause 4.7.2.1 for this resource.  (optional)
     * @return List&lt;InlineResponse200&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<InlineResponse200> nsInstancesGet(String version, String accept, String authorization, String filter, String allFields, String fields, String excludeFields, String excludeDefault, String nextpageOpaqueMarker) throws ApiException {
        ApiResponse<List<InlineResponse200>> resp = nsInstancesGetWithHttpInfo(version, accept, authorization, filter, allFields, fields, excludeFields, excludeDefault, nextpageOpaqueMarker);
        return resp.getData();
    }

    /**
     * Query multiple NS instances.
     * Query NS Instances. The GET method queries information about multiple NS instances. This method shall support the URI query parameters, request and response data structures, and response codes, as specified in the Tables 6.4.2.3.2-1 and 6.4.2.3.2-2. 
     * @param version Version of the API requested to use when responding to this request.  (required)
     * @param accept Content-Types that are acceptable for the response. Reference: IETF RFC 7231  (required)
     * @param authorization The authorization token for the request. Reference: IETF RFC 7235.  (optional)
     * @param filter Attribute-based filtering expression according to clause 4.3.2. The NFVO shall support receiving this parameter as part of the URI query string. The OSS/BSS may supply this parameter. All attribute names that appear in the NsInstance and in data types referenced from it shall be supported by the NFVO in the filter expression.  (optional)
     * @param allFields Include all complex attributes in the response. See clause 4.3.3 for details. The NFVO shall support this parameter.  (optional)
     * @param fields \&quot;Complex attributes to be included into the response. See clause 4.3.3 for details. The NFVO should support this parameter.\&quot;  (optional)
     * @param excludeFields \&quot;Complex attributes to be excluded from the response. See clause 4.3.3 for details. The NFVO should support this parameter.\&quot;  (optional)
     * @param excludeDefault \&quot;Indicates to exclude the following complex attributes from the response. See clause 4.3.3 for details. The NFVO shall support this parameter. The following attributes shall be excluded from the NsInstance structure in the response body if this parameter is provided, or none of the parameters \&quot;all_fields,\&quot; \&quot;fields\&quot;, \&quot;exclude_fields\&quot;, \&quot;exclude_default\&quot; are provided: - vnfInstances - pnfInfo - virtualLinkInfo - vnffgInfo - sapInfo - nsScaleStatus - additionalAffinityOrAntiAffinityRules\&quot;  (optional)
     * @param nextpageOpaqueMarker Marker to obtain the next page of a paged response. Shall be supported by the NFVO if the NFVO supports alternative 2 (paging) according to clause 4.7.2.1 for this resource.  (optional)
     * @return ApiResponse&lt;List&lt;InlineResponse200&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<InlineResponse200>> nsInstancesGetWithHttpInfo(String version, String accept, String authorization, String filter, String allFields, String fields, String excludeFields, String excludeDefault, String nextpageOpaqueMarker) throws ApiException {
        com.squareup.okhttp.Call call = nsInstancesGetValidateBeforeCall(version, accept, authorization, filter, allFields, fields, excludeFields, excludeDefault, nextpageOpaqueMarker, null, null);
        Type localVarReturnType = new TypeToken<List<InlineResponse200>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Query multiple NS instances. (asynchronously)
     * Query NS Instances. The GET method queries information about multiple NS instances. This method shall support the URI query parameters, request and response data structures, and response codes, as specified in the Tables 6.4.2.3.2-1 and 6.4.2.3.2-2. 
     * @param version Version of the API requested to use when responding to this request.  (required)
     * @param accept Content-Types that are acceptable for the response. Reference: IETF RFC 7231  (required)
     * @param authorization The authorization token for the request. Reference: IETF RFC 7235.  (optional)
     * @param filter Attribute-based filtering expression according to clause 4.3.2. The NFVO shall support receiving this parameter as part of the URI query string. The OSS/BSS may supply this parameter. All attribute names that appear in the NsInstance and in data types referenced from it shall be supported by the NFVO in the filter expression.  (optional)
     * @param allFields Include all complex attributes in the response. See clause 4.3.3 for details. The NFVO shall support this parameter.  (optional)
     * @param fields \&quot;Complex attributes to be included into the response. See clause 4.3.3 for details. The NFVO should support this parameter.\&quot;  (optional)
     * @param excludeFields \&quot;Complex attributes to be excluded from the response. See clause 4.3.3 for details. The NFVO should support this parameter.\&quot;  (optional)
     * @param excludeDefault \&quot;Indicates to exclude the following complex attributes from the response. See clause 4.3.3 for details. The NFVO shall support this parameter. The following attributes shall be excluded from the NsInstance structure in the response body if this parameter is provided, or none of the parameters \&quot;all_fields,\&quot; \&quot;fields\&quot;, \&quot;exclude_fields\&quot;, \&quot;exclude_default\&quot; are provided: - vnfInstances - pnfInfo - virtualLinkInfo - vnffgInfo - sapInfo - nsScaleStatus - additionalAffinityOrAntiAffinityRules\&quot;  (optional)
     * @param nextpageOpaqueMarker Marker to obtain the next page of a paged response. Shall be supported by the NFVO if the NFVO supports alternative 2 (paging) according to clause 4.7.2.1 for this resource.  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call nsInstancesGetAsync(String version, String accept, String authorization, String filter, String allFields, String fields, String excludeFields, String excludeDefault, String nextpageOpaqueMarker, final ApiCallback<List<InlineResponse200>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = nsInstancesGetValidateBeforeCall(version, accept, authorization, filter, allFields, fields, excludeFields, excludeDefault, nextpageOpaqueMarker, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<InlineResponse200>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for nsInstancesNsInstanceIdDelete
     * @param nsInstanceId Identifier of the NS instance.  (required)
     * @param version Version of the API requested to use when responding to this request.  (required)
     * @param authorization The authorization token for the request. Reference: IETF RFC 7235.  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call nsInstancesNsInstanceIdDeleteCall(String nsInstanceId, String version, String authorization, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/ns_instances/{nsInstanceId}"
            .replaceAll("\\{" + "nsInstanceId" + "\\}", apiClient.escapeString(nsInstanceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (authorization != null)
        localVarHeaderParams.put("Authorization", apiClient.parameterToString(authorization));
        if (version != null)
        localVarHeaderParams.put("Version", apiClient.parameterToString(version));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call nsInstancesNsInstanceIdDeleteValidateBeforeCall(String nsInstanceId, String version, String authorization, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'nsInstanceId' is set
        if (nsInstanceId == null) {
            throw new ApiException("Missing the required parameter 'nsInstanceId' when calling nsInstancesNsInstanceIdDelete(Async)");
        }
        
        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling nsInstancesNsInstanceIdDelete(Async)");
        }
        

        com.squareup.okhttp.Call call = nsInstancesNsInstanceIdDeleteCall(nsInstanceId, version, authorization, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete NS instance resource.
     * Delete NS Identifier This method deletes an individual NS instance resource. 
     * @param nsInstanceId Identifier of the NS instance.  (required)
     * @param version Version of the API requested to use when responding to this request.  (required)
     * @param authorization The authorization token for the request. Reference: IETF RFC 7235.  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void nsInstancesNsInstanceIdDelete(String nsInstanceId, String version, String authorization) throws ApiException {
        nsInstancesNsInstanceIdDeleteWithHttpInfo(nsInstanceId, version, authorization);
    }

    /**
     * Delete NS instance resource.
     * Delete NS Identifier This method deletes an individual NS instance resource. 
     * @param nsInstanceId Identifier of the NS instance.  (required)
     * @param version Version of the API requested to use when responding to this request.  (required)
     * @param authorization The authorization token for the request. Reference: IETF RFC 7235.  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> nsInstancesNsInstanceIdDeleteWithHttpInfo(String nsInstanceId, String version, String authorization) throws ApiException {
        com.squareup.okhttp.Call call = nsInstancesNsInstanceIdDeleteValidateBeforeCall(nsInstanceId, version, authorization, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete NS instance resource. (asynchronously)
     * Delete NS Identifier This method deletes an individual NS instance resource. 
     * @param nsInstanceId Identifier of the NS instance.  (required)
     * @param version Version of the API requested to use when responding to this request.  (required)
     * @param authorization The authorization token for the request. Reference: IETF RFC 7235.  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call nsInstancesNsInstanceIdDeleteAsync(String nsInstanceId, String version, String authorization, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = nsInstancesNsInstanceIdDeleteValidateBeforeCall(nsInstanceId, version, authorization, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for nsInstancesNsInstanceIdGet
     * @param nsInstanceId Identifier of the NS instance.  (required)
     * @param version Version of the API requested to use when responding to this request.  (required)
     * @param accept Content-Types that are acceptable for the response. Reference: IETF RFC 7231  (required)
     * @param contentType The MIME type of the body of the request. Reference: IETF RFC 7231  (required)
     * @param authorization The authorization token for the request. Reference: IETF RFC 7235.  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call nsInstancesNsInstanceIdGetCall(String nsInstanceId, String version, String accept, String contentType, String authorization, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/ns_instances/{nsInstanceId}"
            .replaceAll("\\{" + "nsInstanceId" + "\\}", apiClient.escapeString(nsInstanceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (authorization != null)
        localVarHeaderParams.put("Authorization", apiClient.parameterToString(authorization));
        if (version != null)
        localVarHeaderParams.put("Version", apiClient.parameterToString(version));
        if (accept != null)
        localVarHeaderParams.put("Accept", apiClient.parameterToString(accept));
        if (contentType != null)
        localVarHeaderParams.put("Content-Type", apiClient.parameterToString(contentType));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call nsInstancesNsInstanceIdGetValidateBeforeCall(String nsInstanceId, String version, String accept, String contentType, String authorization, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'nsInstanceId' is set
        if (nsInstanceId == null) {
            throw new ApiException("Missing the required parameter 'nsInstanceId' when calling nsInstancesNsInstanceIdGet(Async)");
        }
        
        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling nsInstancesNsInstanceIdGet(Async)");
        }
        
        // verify the required parameter 'accept' is set
        if (accept == null) {
            throw new ApiException("Missing the required parameter 'accept' when calling nsInstancesNsInstanceIdGet(Async)");
        }
        
        // verify the required parameter 'contentType' is set
        if (contentType == null) {
            throw new ApiException("Missing the required parameter 'contentType' when calling nsInstancesNsInstanceIdGet(Async)");
        }
        

        com.squareup.okhttp.Call call = nsInstancesNsInstanceIdGetCall(nsInstanceId, version, accept, contentType, authorization, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Read an individual NS instance resource.
     * The GET method retrieves information about a NS instance by reading an individual NS instance resource. 
     * @param nsInstanceId Identifier of the NS instance.  (required)
     * @param version Version of the API requested to use when responding to this request.  (required)
     * @param accept Content-Types that are acceptable for the response. Reference: IETF RFC 7231  (required)
     * @param contentType The MIME type of the body of the request. Reference: IETF RFC 7231  (required)
     * @param authorization The authorization token for the request. Reference: IETF RFC 7235.  (optional)
     * @return NsInstance
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public NsInstance nsInstancesNsInstanceIdGet(String nsInstanceId, String version, String accept, String contentType, String authorization) throws ApiException {
        ApiResponse<NsInstance> resp = nsInstancesNsInstanceIdGetWithHttpInfo(nsInstanceId, version, accept, contentType, authorization);
        return resp.getData();
    }

    /**
     * Read an individual NS instance resource.
     * The GET method retrieves information about a NS instance by reading an individual NS instance resource. 
     * @param nsInstanceId Identifier of the NS instance.  (required)
     * @param version Version of the API requested to use when responding to this request.  (required)
     * @param accept Content-Types that are acceptable for the response. Reference: IETF RFC 7231  (required)
     * @param contentType The MIME type of the body of the request. Reference: IETF RFC 7231  (required)
     * @param authorization The authorization token for the request. Reference: IETF RFC 7235.  (optional)
     * @return ApiResponse&lt;NsInstance&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<NsInstance> nsInstancesNsInstanceIdGetWithHttpInfo(String nsInstanceId, String version, String accept, String contentType, String authorization) throws ApiException {
        com.squareup.okhttp.Call call = nsInstancesNsInstanceIdGetValidateBeforeCall(nsInstanceId, version, accept, contentType, authorization, null, null);
        Type localVarReturnType = new TypeToken<NsInstance>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Read an individual NS instance resource. (asynchronously)
     * The GET method retrieves information about a NS instance by reading an individual NS instance resource. 
     * @param nsInstanceId Identifier of the NS instance.  (required)
     * @param version Version of the API requested to use when responding to this request.  (required)
     * @param accept Content-Types that are acceptable for the response. Reference: IETF RFC 7231  (required)
     * @param contentType The MIME type of the body of the request. Reference: IETF RFC 7231  (required)
     * @param authorization The authorization token for the request. Reference: IETF RFC 7235.  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call nsInstancesNsInstanceIdGetAsync(String nsInstanceId, String version, String accept, String contentType, String authorization, final ApiCallback<NsInstance> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = nsInstancesNsInstanceIdGetValidateBeforeCall(nsInstanceId, version, accept, contentType, authorization, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<NsInstance>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for nsInstancesNsInstanceIdHealPost
     * @param nsInstanceId Identifier of the NS instance to be healed.  (required)
     * @param accept Content-Types that are acceptable for the response. Reference: IETF RFC 7231  (required)
     * @param contentType The MIME type of the body of the request. Reference: IETF RFC 7231  (required)
     * @param version Version of the API requested to use when responding to this request.  (required)
     * @param body Parameters for the heal NS operation, as defined in clause 6.5.2.12.  (required)
     * @param authorization The authorization token for the request. Reference: IETF RFC 7235  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call nsInstancesNsInstanceIdHealPostCall(String nsInstanceId, String accept, String contentType, String version, HealNsRequest body, String authorization, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/ns_instances/{nsInstanceId}/heal"
            .replaceAll("\\{" + "nsInstanceId" + "\\}", apiClient.escapeString(nsInstanceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (accept != null)
        localVarHeaderParams.put("Accept", apiClient.parameterToString(accept));
        if (authorization != null)
        localVarHeaderParams.put("Authorization", apiClient.parameterToString(authorization));
        if (contentType != null)
        localVarHeaderParams.put("Content-Type", apiClient.parameterToString(contentType));
        if (version != null)
        localVarHeaderParams.put("Version", apiClient.parameterToString(version));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call nsInstancesNsInstanceIdHealPostValidateBeforeCall(String nsInstanceId, String accept, String contentType, String version, HealNsRequest body, String authorization, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'nsInstanceId' is set
        if (nsInstanceId == null) {
            throw new ApiException("Missing the required parameter 'nsInstanceId' when calling nsInstancesNsInstanceIdHealPost(Async)");
        }
        
        // verify the required parameter 'accept' is set
        if (accept == null) {
            throw new ApiException("Missing the required parameter 'accept' when calling nsInstancesNsInstanceIdHealPost(Async)");
        }
        
        // verify the required parameter 'contentType' is set
        if (contentType == null) {
            throw new ApiException("Missing the required parameter 'contentType' when calling nsInstancesNsInstanceIdHealPost(Async)");
        }
        
        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling nsInstancesNsInstanceIdHealPost(Async)");
        }
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling nsInstancesNsInstanceIdHealPost(Async)");
        }
        

        com.squareup.okhttp.Call call = nsInstancesNsInstanceIdHealPostCall(nsInstanceId, accept, contentType, version, body, authorization, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Heal a NS instance.
     * The POST method requests to heal a NS instance resource. This method shall follow the provisions specified in the Tables 6.4.7.3.1-1 and 6.4.7.3.1-2 for URI query parameters, request and response data structures, and response codes. 
     * @param nsInstanceId Identifier of the NS instance to be healed.  (required)
     * @param accept Content-Types that are acceptable for the response. Reference: IETF RFC 7231  (required)
     * @param contentType The MIME type of the body of the request. Reference: IETF RFC 7231  (required)
     * @param version Version of the API requested to use when responding to this request.  (required)
     * @param body Parameters for the heal NS operation, as defined in clause 6.5.2.12.  (required)
     * @param authorization The authorization token for the request. Reference: IETF RFC 7235  (optional)
     * @return NsInstance2
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public NsInstance2 nsInstancesNsInstanceIdHealPost(String nsInstanceId, String accept, String contentType, String version, HealNsRequest body, String authorization) throws ApiException {
        ApiResponse<NsInstance2> resp = nsInstancesNsInstanceIdHealPostWithHttpInfo(nsInstanceId, accept, contentType, version, body, authorization);
        return resp.getData();
    }

    /**
     * Heal a NS instance.
     * The POST method requests to heal a NS instance resource. This method shall follow the provisions specified in the Tables 6.4.7.3.1-1 and 6.4.7.3.1-2 for URI query parameters, request and response data structures, and response codes. 
     * @param nsInstanceId Identifier of the NS instance to be healed.  (required)
     * @param accept Content-Types that are acceptable for the response. Reference: IETF RFC 7231  (required)
     * @param contentType The MIME type of the body of the request. Reference: IETF RFC 7231  (required)
     * @param version Version of the API requested to use when responding to this request.  (required)
     * @param body Parameters for the heal NS operation, as defined in clause 6.5.2.12.  (required)
     * @param authorization The authorization token for the request. Reference: IETF RFC 7235  (optional)
     * @return ApiResponse&lt;NsInstance2&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<NsInstance2> nsInstancesNsInstanceIdHealPostWithHttpInfo(String nsInstanceId, String accept, String contentType, String version, HealNsRequest body, String authorization) throws ApiException {
        com.squareup.okhttp.Call call = nsInstancesNsInstanceIdHealPostValidateBeforeCall(nsInstanceId, accept, contentType, version, body, authorization, null, null);
        Type localVarReturnType = new TypeToken<NsInstance2>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Heal a NS instance. (asynchronously)
     * The POST method requests to heal a NS instance resource. This method shall follow the provisions specified in the Tables 6.4.7.3.1-1 and 6.4.7.3.1-2 for URI query parameters, request and response data structures, and response codes. 
     * @param nsInstanceId Identifier of the NS instance to be healed.  (required)
     * @param accept Content-Types that are acceptable for the response. Reference: IETF RFC 7231  (required)
     * @param contentType The MIME type of the body of the request. Reference: IETF RFC 7231  (required)
     * @param version Version of the API requested to use when responding to this request.  (required)
     * @param body Parameters for the heal NS operation, as defined in clause 6.5.2.12.  (required)
     * @param authorization The authorization token for the request. Reference: IETF RFC 7235  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call nsInstancesNsInstanceIdHealPostAsync(String nsInstanceId, String accept, String contentType, String version, HealNsRequest body, String authorization, final ApiCallback<NsInstance2> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = nsInstancesNsInstanceIdHealPostValidateBeforeCall(nsInstanceId, accept, contentType, version, body, authorization, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<NsInstance2>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for nsInstancesNsInstanceIdInstantiatePost
     * @param nsInstanceId Identifier of the NS instance to be instantiated.  (required)
     * @param accept Content-Types that are acceptable for the response. Reference: IETF RFC 7231  (required)
     * @param contentType The MIME type of the body of the request. Reference: IETF RFC 7231  (required)
     * @param version Version of the API requested to use when responding to this request.  (required)
     * @param body Parameters for the instantiate NS operation, as defined in clause 6.5.2.10.  (required)
     * @param authorization The authorization token for the request. Reference: IETF RFC 7235  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call nsInstancesNsInstanceIdInstantiatePostCall(String nsInstanceId, String accept, String contentType, String version, InstantiateNsRequest body, String authorization, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/ns_instances/{nsInstanceId}/instantiate"
            .replaceAll("\\{" + "nsInstanceId" + "\\}", apiClient.escapeString(nsInstanceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (accept != null)
        localVarHeaderParams.put("Accept", apiClient.parameterToString(accept));
        if (authorization != null)
        localVarHeaderParams.put("Authorization", apiClient.parameterToString(authorization));
        if (contentType != null)
        localVarHeaderParams.put("Content-Type", apiClient.parameterToString(contentType));
        if (version != null)
        localVarHeaderParams.put("Version", apiClient.parameterToString(version));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call nsInstancesNsInstanceIdInstantiatePostValidateBeforeCall(String nsInstanceId, String accept, String contentType, String version, InstantiateNsRequest body, String authorization, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'nsInstanceId' is set
        if (nsInstanceId == null) {
            throw new ApiException("Missing the required parameter 'nsInstanceId' when calling nsInstancesNsInstanceIdInstantiatePost(Async)");
        }
        
        // verify the required parameter 'accept' is set
        if (accept == null) {
            throw new ApiException("Missing the required parameter 'accept' when calling nsInstancesNsInstanceIdInstantiatePost(Async)");
        }
        
        // verify the required parameter 'contentType' is set
        if (contentType == null) {
            throw new ApiException("Missing the required parameter 'contentType' when calling nsInstancesNsInstanceIdInstantiatePost(Async)");
        }
        
        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling nsInstancesNsInstanceIdInstantiatePost(Async)");
        }
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling nsInstancesNsInstanceIdInstantiatePost(Async)");
        }
        

        com.squareup.okhttp.Call call = nsInstancesNsInstanceIdInstantiatePostCall(nsInstanceId, accept, contentType, version, body, authorization, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Instantiate a NS.
     * The POST method requests to instantiate a NS instance resource. 
     * @param nsInstanceId Identifier of the NS instance to be instantiated.  (required)
     * @param accept Content-Types that are acceptable for the response. Reference: IETF RFC 7231  (required)
     * @param contentType The MIME type of the body of the request. Reference: IETF RFC 7231  (required)
     * @param version Version of the API requested to use when responding to this request.  (required)
     * @param body Parameters for the instantiate NS operation, as defined in clause 6.5.2.10.  (required)
     * @param authorization The authorization token for the request. Reference: IETF RFC 7235  (optional)
     * @return NsInstance2
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public NsInstance2 nsInstancesNsInstanceIdInstantiatePost(String nsInstanceId, String accept, String contentType, String version, InstantiateNsRequest body, String authorization) throws ApiException {
        ApiResponse<NsInstance2> resp = nsInstancesNsInstanceIdInstantiatePostWithHttpInfo(nsInstanceId, accept, contentType, version, body, authorization);
        return resp.getData();
    }

    /**
     * Instantiate a NS.
     * The POST method requests to instantiate a NS instance resource. 
     * @param nsInstanceId Identifier of the NS instance to be instantiated.  (required)
     * @param accept Content-Types that are acceptable for the response. Reference: IETF RFC 7231  (required)
     * @param contentType The MIME type of the body of the request. Reference: IETF RFC 7231  (required)
     * @param version Version of the API requested to use when responding to this request.  (required)
     * @param body Parameters for the instantiate NS operation, as defined in clause 6.5.2.10.  (required)
     * @param authorization The authorization token for the request. Reference: IETF RFC 7235  (optional)
     * @return ApiResponse&lt;NsInstance2&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<NsInstance2> nsInstancesNsInstanceIdInstantiatePostWithHttpInfo(String nsInstanceId, String accept, String contentType, String version, InstantiateNsRequest body, String authorization) throws ApiException {
        com.squareup.okhttp.Call call = nsInstancesNsInstanceIdInstantiatePostValidateBeforeCall(nsInstanceId, accept, contentType, version, body, authorization, null, null);
        Type localVarReturnType = new TypeToken<NsInstance2>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Instantiate a NS. (asynchronously)
     * The POST method requests to instantiate a NS instance resource. 
     * @param nsInstanceId Identifier of the NS instance to be instantiated.  (required)
     * @param accept Content-Types that are acceptable for the response. Reference: IETF RFC 7231  (required)
     * @param contentType The MIME type of the body of the request. Reference: IETF RFC 7231  (required)
     * @param version Version of the API requested to use when responding to this request.  (required)
     * @param body Parameters for the instantiate NS operation, as defined in clause 6.5.2.10.  (required)
     * @param authorization The authorization token for the request. Reference: IETF RFC 7235  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call nsInstancesNsInstanceIdInstantiatePostAsync(String nsInstanceId, String accept, String contentType, String version, InstantiateNsRequest body, String authorization, final ApiCallback<NsInstance2> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = nsInstancesNsInstanceIdInstantiatePostValidateBeforeCall(nsInstanceId, accept, contentType, version, body, authorization, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<NsInstance2>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for nsInstancesNsInstanceIdScalePost
     * @param nsInstanceId Identifier of the NS instance to be scaled.  (required)
     * @param accept Content-Types that are acceptable for the response. Reference: IETF RFC 7231  (required)
     * @param contentType The MIME type of the body of the request. Reference: IETF RFC 7231  (required)
     * @param version Version of the API requested to use when responding to this request.  (required)
     * @param body Parameters for the scale NS operation, as defined in clause 6.5.2.13.  (required)
     * @param authorization The authorization token for the request. Reference: IETF RFC 7235  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call nsInstancesNsInstanceIdScalePostCall(String nsInstanceId, String accept, String contentType, String version, ScaleNsRequest body, String authorization, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/ns_instances/{nsInstanceId}/scale"
            .replaceAll("\\{" + "nsInstanceId" + "\\}", apiClient.escapeString(nsInstanceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (accept != null)
        localVarHeaderParams.put("Accept", apiClient.parameterToString(accept));
        if (authorization != null)
        localVarHeaderParams.put("Authorization", apiClient.parameterToString(authorization));
        if (contentType != null)
        localVarHeaderParams.put("Content-Type", apiClient.parameterToString(contentType));
        if (version != null)
        localVarHeaderParams.put("Version", apiClient.parameterToString(version));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call nsInstancesNsInstanceIdScalePostValidateBeforeCall(String nsInstanceId, String accept, String contentType, String version, ScaleNsRequest body, String authorization, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'nsInstanceId' is set
        if (nsInstanceId == null) {
            throw new ApiException("Missing the required parameter 'nsInstanceId' when calling nsInstancesNsInstanceIdScalePost(Async)");
        }
        
        // verify the required parameter 'accept' is set
        if (accept == null) {
            throw new ApiException("Missing the required parameter 'accept' when calling nsInstancesNsInstanceIdScalePost(Async)");
        }
        
        // verify the required parameter 'contentType' is set
        if (contentType == null) {
            throw new ApiException("Missing the required parameter 'contentType' when calling nsInstancesNsInstanceIdScalePost(Async)");
        }
        
        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling nsInstancesNsInstanceIdScalePost(Async)");
        }
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling nsInstancesNsInstanceIdScalePost(Async)");
        }
        

        com.squareup.okhttp.Call call = nsInstancesNsInstanceIdScalePostCall(nsInstanceId, accept, contentType, version, body, authorization, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Scale a NS instance.
     * The POST method requests to scale a NS instance resource. 
     * @param nsInstanceId Identifier of the NS instance to be scaled.  (required)
     * @param accept Content-Types that are acceptable for the response. Reference: IETF RFC 7231  (required)
     * @param contentType The MIME type of the body of the request. Reference: IETF RFC 7231  (required)
     * @param version Version of the API requested to use when responding to this request.  (required)
     * @param body Parameters for the scale NS operation, as defined in clause 6.5.2.13.  (required)
     * @param authorization The authorization token for the request. Reference: IETF RFC 7235  (optional)
     * @return NsInstance2
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public NsInstance2 nsInstancesNsInstanceIdScalePost(String nsInstanceId, String accept, String contentType, String version, ScaleNsRequest body, String authorization) throws ApiException {
        ApiResponse<NsInstance2> resp = nsInstancesNsInstanceIdScalePostWithHttpInfo(nsInstanceId, accept, contentType, version, body, authorization);
        return resp.getData();
    }

    /**
     * Scale a NS instance.
     * The POST method requests to scale a NS instance resource. 
     * @param nsInstanceId Identifier of the NS instance to be scaled.  (required)
     * @param accept Content-Types that are acceptable for the response. Reference: IETF RFC 7231  (required)
     * @param contentType The MIME type of the body of the request. Reference: IETF RFC 7231  (required)
     * @param version Version of the API requested to use when responding to this request.  (required)
     * @param body Parameters for the scale NS operation, as defined in clause 6.5.2.13.  (required)
     * @param authorization The authorization token for the request. Reference: IETF RFC 7235  (optional)
     * @return ApiResponse&lt;NsInstance2&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<NsInstance2> nsInstancesNsInstanceIdScalePostWithHttpInfo(String nsInstanceId, String accept, String contentType, String version, ScaleNsRequest body, String authorization) throws ApiException {
        com.squareup.okhttp.Call call = nsInstancesNsInstanceIdScalePostValidateBeforeCall(nsInstanceId, accept, contentType, version, body, authorization, null, null);
        Type localVarReturnType = new TypeToken<NsInstance2>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Scale a NS instance. (asynchronously)
     * The POST method requests to scale a NS instance resource. 
     * @param nsInstanceId Identifier of the NS instance to be scaled.  (required)
     * @param accept Content-Types that are acceptable for the response. Reference: IETF RFC 7231  (required)
     * @param contentType The MIME type of the body of the request. Reference: IETF RFC 7231  (required)
     * @param version Version of the API requested to use when responding to this request.  (required)
     * @param body Parameters for the scale NS operation, as defined in clause 6.5.2.13.  (required)
     * @param authorization The authorization token for the request. Reference: IETF RFC 7235  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call nsInstancesNsInstanceIdScalePostAsync(String nsInstanceId, String accept, String contentType, String version, ScaleNsRequest body, String authorization, final ApiCallback<NsInstance2> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = nsInstancesNsInstanceIdScalePostValidateBeforeCall(nsInstanceId, accept, contentType, version, body, authorization, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<NsInstance2>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for nsInstancesNsInstanceIdTerminatePost
     * @param nsInstanceId The identifier of the NS instance to be terminated.  (required)
     * @param accept Content-Types that are acceptable for the response. Reference: IETF RFC 7231  (required)
     * @param contentType The MIME type of the body of the request. Reference: IETF RFC 7231  (required)
     * @param version Version of the API requested to use when responding to this request.  (required)
     * @param body The terminate NS request parameters, as defined in  clause 6.5.2.14.  (required)
     * @param authorization The authorization token for the request. Reference: IETF RFC 7235  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call nsInstancesNsInstanceIdTerminatePostCall(String nsInstanceId, String accept, String contentType, String version, TerminateNsRequest body, String authorization, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/ns_instances/{nsInstanceId}/terminate"
            .replaceAll("\\{" + "nsInstanceId" + "\\}", apiClient.escapeString(nsInstanceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (accept != null)
        localVarHeaderParams.put("Accept", apiClient.parameterToString(accept));
        if (authorization != null)
        localVarHeaderParams.put("Authorization", apiClient.parameterToString(authorization));
        if (contentType != null)
        localVarHeaderParams.put("Content-Type", apiClient.parameterToString(contentType));
        if (version != null)
        localVarHeaderParams.put("Version", apiClient.parameterToString(version));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call nsInstancesNsInstanceIdTerminatePostValidateBeforeCall(String nsInstanceId, String accept, String contentType, String version, TerminateNsRequest body, String authorization, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'nsInstanceId' is set
        if (nsInstanceId == null) {
            throw new ApiException("Missing the required parameter 'nsInstanceId' when calling nsInstancesNsInstanceIdTerminatePost(Async)");
        }
        
        // verify the required parameter 'accept' is set
        if (accept == null) {
            throw new ApiException("Missing the required parameter 'accept' when calling nsInstancesNsInstanceIdTerminatePost(Async)");
        }
        
        // verify the required parameter 'contentType' is set
        if (contentType == null) {
            throw new ApiException("Missing the required parameter 'contentType' when calling nsInstancesNsInstanceIdTerminatePost(Async)");
        }
        
        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling nsInstancesNsInstanceIdTerminatePost(Async)");
        }
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling nsInstancesNsInstanceIdTerminatePost(Async)");
        }
        

        com.squareup.okhttp.Call call = nsInstancesNsInstanceIdTerminatePostCall(nsInstanceId, accept, contentType, version, body, authorization, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Terminate a NS instance.
     * Terminate NS task. The POST method terminates a NS instance. This method can only be used with a NS instance in the INSTANTIATED state. Terminating a NS instance does not delete the NS instance identifier, but rather transitions the NS into the NOT_INSTANTIATED state. This method shall support the URI query parameters, request and response data structures, and response codes, as specified in the Tables 6.4.8.3.1-1 and 6.8.8.3.1-2. 
     * @param nsInstanceId The identifier of the NS instance to be terminated.  (required)
     * @param accept Content-Types that are acceptable for the response. Reference: IETF RFC 7231  (required)
     * @param contentType The MIME type of the body of the request. Reference: IETF RFC 7231  (required)
     * @param version Version of the API requested to use when responding to this request.  (required)
     * @param body The terminate NS request parameters, as defined in  clause 6.5.2.14.  (required)
     * @param authorization The authorization token for the request. Reference: IETF RFC 7235  (optional)
     * @return NsInstance2
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public NsInstance2 nsInstancesNsInstanceIdTerminatePost(String nsInstanceId, String accept, String contentType, String version, TerminateNsRequest body, String authorization) throws ApiException {
        ApiResponse<NsInstance2> resp = nsInstancesNsInstanceIdTerminatePostWithHttpInfo(nsInstanceId, accept, contentType, version, body, authorization);
        return resp.getData();
    }

    /**
     * Terminate a NS instance.
     * Terminate NS task. The POST method terminates a NS instance. This method can only be used with a NS instance in the INSTANTIATED state. Terminating a NS instance does not delete the NS instance identifier, but rather transitions the NS into the NOT_INSTANTIATED state. This method shall support the URI query parameters, request and response data structures, and response codes, as specified in the Tables 6.4.8.3.1-1 and 6.8.8.3.1-2. 
     * @param nsInstanceId The identifier of the NS instance to be terminated.  (required)
     * @param accept Content-Types that are acceptable for the response. Reference: IETF RFC 7231  (required)
     * @param contentType The MIME type of the body of the request. Reference: IETF RFC 7231  (required)
     * @param version Version of the API requested to use when responding to this request.  (required)
     * @param body The terminate NS request parameters, as defined in  clause 6.5.2.14.  (required)
     * @param authorization The authorization token for the request. Reference: IETF RFC 7235  (optional)
     * @return ApiResponse&lt;NsInstance2&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<NsInstance2> nsInstancesNsInstanceIdTerminatePostWithHttpInfo(String nsInstanceId, String accept, String contentType, String version, TerminateNsRequest body, String authorization) throws ApiException {
        com.squareup.okhttp.Call call = nsInstancesNsInstanceIdTerminatePostValidateBeforeCall(nsInstanceId, accept, contentType, version, body, authorization, null, null);
        Type localVarReturnType = new TypeToken<NsInstance2>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Terminate a NS instance. (asynchronously)
     * Terminate NS task. The POST method terminates a NS instance. This method can only be used with a NS instance in the INSTANTIATED state. Terminating a NS instance does not delete the NS instance identifier, but rather transitions the NS into the NOT_INSTANTIATED state. This method shall support the URI query parameters, request and response data structures, and response codes, as specified in the Tables 6.4.8.3.1-1 and 6.8.8.3.1-2. 
     * @param nsInstanceId The identifier of the NS instance to be terminated.  (required)
     * @param accept Content-Types that are acceptable for the response. Reference: IETF RFC 7231  (required)
     * @param contentType The MIME type of the body of the request. Reference: IETF RFC 7231  (required)
     * @param version Version of the API requested to use when responding to this request.  (required)
     * @param body The terminate NS request parameters, as defined in  clause 6.5.2.14.  (required)
     * @param authorization The authorization token for the request. Reference: IETF RFC 7235  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call nsInstancesNsInstanceIdTerminatePostAsync(String nsInstanceId, String accept, String contentType, String version, TerminateNsRequest body, String authorization, final ApiCallback<NsInstance2> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = nsInstancesNsInstanceIdTerminatePostValidateBeforeCall(nsInstanceId, accept, contentType, version, body, authorization, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<NsInstance2>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for nsInstancesNsInstanceIdUpdatePost
     * @param nsInstanceId Identifier of the NS instance to be updated.  (required)
     * @param accept Content-Types that are acceptable for the response. Reference: IETF RFC 7231  (required)
     * @param contentType The MIME type of the body of the request. Reference: IETF RFC 7231  (required)
     * @param version Version of the API requested to use when responding to this request.  (required)
     * @param body Parameters for the update NS operation, as defined in clause 6.5.2.11.  (required)
     * @param authorization The authorization token for the request. Reference: IETF RFC 7235  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call nsInstancesNsInstanceIdUpdatePostCall(String nsInstanceId, String accept, String contentType, String version, UpdateNsRequest body, String authorization, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/ns_instances/{nsInstanceId}/update"
            .replaceAll("\\{" + "nsInstanceId" + "\\}", apiClient.escapeString(nsInstanceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (accept != null)
        localVarHeaderParams.put("Accept", apiClient.parameterToString(accept));
        if (authorization != null)
        localVarHeaderParams.put("Authorization", apiClient.parameterToString(authorization));
        if (contentType != null)
        localVarHeaderParams.put("Content-Type", apiClient.parameterToString(contentType));
        if (version != null)
        localVarHeaderParams.put("Version", apiClient.parameterToString(version));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call nsInstancesNsInstanceIdUpdatePostValidateBeforeCall(String nsInstanceId, String accept, String contentType, String version, UpdateNsRequest body, String authorization, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'nsInstanceId' is set
        if (nsInstanceId == null) {
            throw new ApiException("Missing the required parameter 'nsInstanceId' when calling nsInstancesNsInstanceIdUpdatePost(Async)");
        }
        
        // verify the required parameter 'accept' is set
        if (accept == null) {
            throw new ApiException("Missing the required parameter 'accept' when calling nsInstancesNsInstanceIdUpdatePost(Async)");
        }
        
        // verify the required parameter 'contentType' is set
        if (contentType == null) {
            throw new ApiException("Missing the required parameter 'contentType' when calling nsInstancesNsInstanceIdUpdatePost(Async)");
        }
        
        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling nsInstancesNsInstanceIdUpdatePost(Async)");
        }
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling nsInstancesNsInstanceIdUpdatePost(Async)");
        }
        

        com.squareup.okhttp.Call call = nsInstancesNsInstanceIdUpdatePostCall(nsInstanceId, accept, contentType, version, body, authorization, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Updates a NS instance.
     * Scale NS instance. The POST method requests to scale a NS instance resource. 
     * @param nsInstanceId Identifier of the NS instance to be updated.  (required)
     * @param accept Content-Types that are acceptable for the response. Reference: IETF RFC 7231  (required)
     * @param contentType The MIME type of the body of the request. Reference: IETF RFC 7231  (required)
     * @param version Version of the API requested to use when responding to this request.  (required)
     * @param body Parameters for the update NS operation, as defined in clause 6.5.2.11.  (required)
     * @param authorization The authorization token for the request. Reference: IETF RFC 7235  (optional)
     * @return NsInstance2
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public NsInstance2 nsInstancesNsInstanceIdUpdatePost(String nsInstanceId, String accept, String contentType, String version, UpdateNsRequest body, String authorization) throws ApiException {
        ApiResponse<NsInstance2> resp = nsInstancesNsInstanceIdUpdatePostWithHttpInfo(nsInstanceId, accept, contentType, version, body, authorization);
        return resp.getData();
    }

    /**
     * Updates a NS instance.
     * Scale NS instance. The POST method requests to scale a NS instance resource. 
     * @param nsInstanceId Identifier of the NS instance to be updated.  (required)
     * @param accept Content-Types that are acceptable for the response. Reference: IETF RFC 7231  (required)
     * @param contentType The MIME type of the body of the request. Reference: IETF RFC 7231  (required)
     * @param version Version of the API requested to use when responding to this request.  (required)
     * @param body Parameters for the update NS operation, as defined in clause 6.5.2.11.  (required)
     * @param authorization The authorization token for the request. Reference: IETF RFC 7235  (optional)
     * @return ApiResponse&lt;NsInstance2&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<NsInstance2> nsInstancesNsInstanceIdUpdatePostWithHttpInfo(String nsInstanceId, String accept, String contentType, String version, UpdateNsRequest body, String authorization) throws ApiException {
        com.squareup.okhttp.Call call = nsInstancesNsInstanceIdUpdatePostValidateBeforeCall(nsInstanceId, accept, contentType, version, body, authorization, null, null);
        Type localVarReturnType = new TypeToken<NsInstance2>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Updates a NS instance. (asynchronously)
     * Scale NS instance. The POST method requests to scale a NS instance resource. 
     * @param nsInstanceId Identifier of the NS instance to be updated.  (required)
     * @param accept Content-Types that are acceptable for the response. Reference: IETF RFC 7231  (required)
     * @param contentType The MIME type of the body of the request. Reference: IETF RFC 7231  (required)
     * @param version Version of the API requested to use when responding to this request.  (required)
     * @param body Parameters for the update NS operation, as defined in clause 6.5.2.11.  (required)
     * @param authorization The authorization token for the request. Reference: IETF RFC 7235  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call nsInstancesNsInstanceIdUpdatePostAsync(String nsInstanceId, String accept, String contentType, String version, UpdateNsRequest body, String authorization, final ApiCallback<NsInstance2> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = nsInstancesNsInstanceIdUpdatePostValidateBeforeCall(nsInstanceId, accept, contentType, version, body, authorization, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<NsInstance2>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for nsInstancesPost
     * @param version Version of the API requested to use when responding to this request.  (required)
     * @param accept Content-Types that are acceptable for the response. Reference: IETF RFC 7231  (required)
     * @param contentType The MIME type of the body of the request. Reference: IETF RFC 7231  (required)
     * @param body The NS creation parameters, as defined in clause 6.5.2.7.  (required)
     * @param authorization The authorization token for the request. Reference: IETF RFC 7235.  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call nsInstancesPostCall(String version, String accept, String contentType, CreateNsRequest body, String authorization, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/ns_instances";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (authorization != null)
        localVarHeaderParams.put("Authorization", apiClient.parameterToString(authorization));
        if (version != null)
        localVarHeaderParams.put("Version", apiClient.parameterToString(version));
        if (accept != null)
        localVarHeaderParams.put("Accept", apiClient.parameterToString(accept));
        if (contentType != null)
        localVarHeaderParams.put("Content-Type", apiClient.parameterToString(contentType));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call nsInstancesPostValidateBeforeCall(String version, String accept, String contentType, CreateNsRequest body, String authorization, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling nsInstancesPost(Async)");
        }
        
        // verify the required parameter 'accept' is set
        if (accept == null) {
            throw new ApiException("Missing the required parameter 'accept' when calling nsInstancesPost(Async)");
        }
        
        // verify the required parameter 'contentType' is set
        if (contentType == null) {
            throw new ApiException("Missing the required parameter 'contentType' when calling nsInstancesPost(Async)");
        }
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling nsInstancesPost(Async)");
        }
        

        com.squareup.okhttp.Call call = nsInstancesPostCall(version, accept, contentType, body, authorization, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Create a NS instance resource.
     * The POST method creates a new NS instance resource. 
     * @param version Version of the API requested to use when responding to this request.  (required)
     * @param accept Content-Types that are acceptable for the response. Reference: IETF RFC 7231  (required)
     * @param contentType The MIME type of the body of the request. Reference: IETF RFC 7231  (required)
     * @param body The NS creation parameters, as defined in clause 6.5.2.7.  (required)
     * @param authorization The authorization token for the request. Reference: IETF RFC 7235.  (optional)
     * @return NsInstance
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public NsInstance nsInstancesPost(String version, String accept, String contentType, CreateNsRequest body, String authorization) throws ApiException {
        ApiResponse<NsInstance> resp = nsInstancesPostWithHttpInfo(version, accept, contentType, body, authorization);
        return resp.getData();
    }

    /**
     * Create a NS instance resource.
     * The POST method creates a new NS instance resource. 
     * @param version Version of the API requested to use when responding to this request.  (required)
     * @param accept Content-Types that are acceptable for the response. Reference: IETF RFC 7231  (required)
     * @param contentType The MIME type of the body of the request. Reference: IETF RFC 7231  (required)
     * @param body The NS creation parameters, as defined in clause 6.5.2.7.  (required)
     * @param authorization The authorization token for the request. Reference: IETF RFC 7235.  (optional)
     * @return ApiResponse&lt;NsInstance&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<NsInstance> nsInstancesPostWithHttpInfo(String version, String accept, String contentType, CreateNsRequest body, String authorization) throws ApiException {
        com.squareup.okhttp.Call call = nsInstancesPostValidateBeforeCall(version, accept, contentType, body, authorization, null, null);
        Type localVarReturnType = new TypeToken<NsInstance>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create a NS instance resource. (asynchronously)
     * The POST method creates a new NS instance resource. 
     * @param version Version of the API requested to use when responding to this request.  (required)
     * @param accept Content-Types that are acceptable for the response. Reference: IETF RFC 7231  (required)
     * @param contentType The MIME type of the body of the request. Reference: IETF RFC 7231  (required)
     * @param body The NS creation parameters, as defined in clause 6.5.2.7.  (required)
     * @param authorization The authorization token for the request. Reference: IETF RFC 7235.  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call nsInstancesPostAsync(String version, String accept, String contentType, CreateNsRequest body, String authorization, final ApiCallback<NsInstance> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = nsInstancesPostValidateBeforeCall(version, accept, contentType, body, authorization, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<NsInstance>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for nsLcmOpOccsGet
     * @param accept Content-Types that are acceptable for the response. Reference: IETF RFC 7231  (required)
     * @param version Version of the API requested to use when responding to this request.  (required)
     * @param filter Attribute-based filtering expression according to clause 4.3.2. The NFVO shall support receiving this parameter as part of the URI query string. The OSS/BSS may supply this parameter. All attribute names that appear in the NsLcmOpOcc and in data types referenced from it shall be supported by the NFVO in the filter expression.  (optional)
     * @param fields Complex attributes to be included into the response. See clause 4.3.3 for details. The NFVO should support this parameter.  (optional)
     * @param excludeFields Complex attributes to be excluded from the response. See clause 4.3.3 for details. The NFVO should support this parameter.  (optional)
     * @param excludeDefault Indicates to exclude the following complex attributes from the response. See clause 4.3.3 for details. The NFVO shall support this parameter. The following attributes shall be excluded from the NsLcmOpOcc structure in the response body if this parameter is provided: - operationParams - changedVnfInfo - error - resourceChanges  (optional)
     * @param nextpageOpaqueMarker Marker to obtain the next page of a paged response. Shall be supported by the NFVO if the NFVO supports alternative 2 (paging) according to clause 4.7.2.1 for this resource.  (optional)
     * @param authorization The authorization token for the request. Reference: IETF RFC 7235  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call nsLcmOpOccsGetCall(String accept, String version, String filter, String fields, String excludeFields, String excludeDefault, String nextpageOpaqueMarker, String authorization, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/ns_lcm_op_occs";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (filter != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("filter", filter));
        if (fields != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("fields", fields));
        if (excludeFields != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("exclude_fields", excludeFields));
        if (excludeDefault != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("exclude_default", excludeDefault));
        if (nextpageOpaqueMarker != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("nextpage_opaque_marker", nextpageOpaqueMarker));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (accept != null)
        localVarHeaderParams.put("Accept", apiClient.parameterToString(accept));
        if (authorization != null)
        localVarHeaderParams.put("Authorization", apiClient.parameterToString(authorization));
        if (version != null)
        localVarHeaderParams.put("Version", apiClient.parameterToString(version));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call nsLcmOpOccsGetValidateBeforeCall(String accept, String version, String filter, String fields, String excludeFields, String excludeDefault, String nextpageOpaqueMarker, String authorization, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'accept' is set
        if (accept == null) {
            throw new ApiException("Missing the required parameter 'accept' when calling nsLcmOpOccsGet(Async)");
        }
        
        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling nsLcmOpOccsGet(Async)");
        }
        

        com.squareup.okhttp.Call call = nsLcmOpOccsGetCall(accept, version, filter, fields, excludeFields, excludeDefault, nextpageOpaqueMarker, authorization, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Query multiple NS LCM operation occurrences.
     * Get Operation Status. The client can use this method to query status information about multiple NS lifecycle management operation occurrences. This method shall follow the provisions specified in the Tables 6.4.9.3.2-1 and 6.4.9.3.2-2 for URI query parameters, request and response data structures, and response codes. 
     * @param accept Content-Types that are acceptable for the response. Reference: IETF RFC 7231  (required)
     * @param version Version of the API requested to use when responding to this request.  (required)
     * @param filter Attribute-based filtering expression according to clause 4.3.2. The NFVO shall support receiving this parameter as part of the URI query string. The OSS/BSS may supply this parameter. All attribute names that appear in the NsLcmOpOcc and in data types referenced from it shall be supported by the NFVO in the filter expression.  (optional)
     * @param fields Complex attributes to be included into the response. See clause 4.3.3 for details. The NFVO should support this parameter.  (optional)
     * @param excludeFields Complex attributes to be excluded from the response. See clause 4.3.3 for details. The NFVO should support this parameter.  (optional)
     * @param excludeDefault Indicates to exclude the following complex attributes from the response. See clause 4.3.3 for details. The NFVO shall support this parameter. The following attributes shall be excluded from the NsLcmOpOcc structure in the response body if this parameter is provided: - operationParams - changedVnfInfo - error - resourceChanges  (optional)
     * @param nextpageOpaqueMarker Marker to obtain the next page of a paged response. Shall be supported by the NFVO if the NFVO supports alternative 2 (paging) according to clause 4.7.2.1 for this resource.  (optional)
     * @param authorization The authorization token for the request. Reference: IETF RFC 7235  (optional)
     * @return List&lt;InlineResponse2001&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<InlineResponse2001> nsLcmOpOccsGet(String accept, String version, String filter, String fields, String excludeFields, String excludeDefault, String nextpageOpaqueMarker, String authorization) throws ApiException {
        ApiResponse<List<InlineResponse2001>> resp = nsLcmOpOccsGetWithHttpInfo(accept, version, filter, fields, excludeFields, excludeDefault, nextpageOpaqueMarker, authorization);
        return resp.getData();
    }

    /**
     * Query multiple NS LCM operation occurrences.
     * Get Operation Status. The client can use this method to query status information about multiple NS lifecycle management operation occurrences. This method shall follow the provisions specified in the Tables 6.4.9.3.2-1 and 6.4.9.3.2-2 for URI query parameters, request and response data structures, and response codes. 
     * @param accept Content-Types that are acceptable for the response. Reference: IETF RFC 7231  (required)
     * @param version Version of the API requested to use when responding to this request.  (required)
     * @param filter Attribute-based filtering expression according to clause 4.3.2. The NFVO shall support receiving this parameter as part of the URI query string. The OSS/BSS may supply this parameter. All attribute names that appear in the NsLcmOpOcc and in data types referenced from it shall be supported by the NFVO in the filter expression.  (optional)
     * @param fields Complex attributes to be included into the response. See clause 4.3.3 for details. The NFVO should support this parameter.  (optional)
     * @param excludeFields Complex attributes to be excluded from the response. See clause 4.3.3 for details. The NFVO should support this parameter.  (optional)
     * @param excludeDefault Indicates to exclude the following complex attributes from the response. See clause 4.3.3 for details. The NFVO shall support this parameter. The following attributes shall be excluded from the NsLcmOpOcc structure in the response body if this parameter is provided: - operationParams - changedVnfInfo - error - resourceChanges  (optional)
     * @param nextpageOpaqueMarker Marker to obtain the next page of a paged response. Shall be supported by the NFVO if the NFVO supports alternative 2 (paging) according to clause 4.7.2.1 for this resource.  (optional)
     * @param authorization The authorization token for the request. Reference: IETF RFC 7235  (optional)
     * @return ApiResponse&lt;List&lt;InlineResponse2001&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<InlineResponse2001>> nsLcmOpOccsGetWithHttpInfo(String accept, String version, String filter, String fields, String excludeFields, String excludeDefault, String nextpageOpaqueMarker, String authorization) throws ApiException {
        com.squareup.okhttp.Call call = nsLcmOpOccsGetValidateBeforeCall(accept, version, filter, fields, excludeFields, excludeDefault, nextpageOpaqueMarker, authorization, null, null);
        Type localVarReturnType = new TypeToken<List<InlineResponse2001>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Query multiple NS LCM operation occurrences. (asynchronously)
     * Get Operation Status. The client can use this method to query status information about multiple NS lifecycle management operation occurrences. This method shall follow the provisions specified in the Tables 6.4.9.3.2-1 and 6.4.9.3.2-2 for URI query parameters, request and response data structures, and response codes. 
     * @param accept Content-Types that are acceptable for the response. Reference: IETF RFC 7231  (required)
     * @param version Version of the API requested to use when responding to this request.  (required)
     * @param filter Attribute-based filtering expression according to clause 4.3.2. The NFVO shall support receiving this parameter as part of the URI query string. The OSS/BSS may supply this parameter. All attribute names that appear in the NsLcmOpOcc and in data types referenced from it shall be supported by the NFVO in the filter expression.  (optional)
     * @param fields Complex attributes to be included into the response. See clause 4.3.3 for details. The NFVO should support this parameter.  (optional)
     * @param excludeFields Complex attributes to be excluded from the response. See clause 4.3.3 for details. The NFVO should support this parameter.  (optional)
     * @param excludeDefault Indicates to exclude the following complex attributes from the response. See clause 4.3.3 for details. The NFVO shall support this parameter. The following attributes shall be excluded from the NsLcmOpOcc structure in the response body if this parameter is provided: - operationParams - changedVnfInfo - error - resourceChanges  (optional)
     * @param nextpageOpaqueMarker Marker to obtain the next page of a paged response. Shall be supported by the NFVO if the NFVO supports alternative 2 (paging) according to clause 4.7.2.1 for this resource.  (optional)
     * @param authorization The authorization token for the request. Reference: IETF RFC 7235  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call nsLcmOpOccsGetAsync(String accept, String version, String filter, String fields, String excludeFields, String excludeDefault, String nextpageOpaqueMarker, String authorization, final ApiCallback<List<InlineResponse2001>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = nsLcmOpOccsGetValidateBeforeCall(accept, version, filter, fields, excludeFields, excludeDefault, nextpageOpaqueMarker, authorization, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<InlineResponse2001>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for nsLcmOpOccsNsLcmOpOccIdContinuePost
     * @param nsLcmOpOccId Identifier of a NS lifecycle management operation occurrence to be continued.  (required)
     * @param version Version of the API requested to use when responding to this request.  (required)
     * @param authorization The authorization token for the request. Reference: IETF RFC 7235  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call nsLcmOpOccsNsLcmOpOccIdContinuePostCall(String nsLcmOpOccId, String version, String authorization, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/ns_lcm_op_occs/{nsLcmOpOccId}/continue"
            .replaceAll("\\{" + "nsLcmOpOccId" + "\\}", apiClient.escapeString(nsLcmOpOccId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (authorization != null)
        localVarHeaderParams.put("Authorization", apiClient.parameterToString(authorization));
        if (version != null)
        localVarHeaderParams.put("Version", apiClient.parameterToString(version));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call nsLcmOpOccsNsLcmOpOccIdContinuePostValidateBeforeCall(String nsLcmOpOccId, String version, String authorization, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'nsLcmOpOccId' is set
        if (nsLcmOpOccId == null) {
            throw new ApiException("Missing the required parameter 'nsLcmOpOccId' when calling nsLcmOpOccsNsLcmOpOccIdContinuePost(Async)");
        }
        
        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling nsLcmOpOccsNsLcmOpOccIdContinuePost(Async)");
        }
        

        com.squareup.okhttp.Call call = nsLcmOpOccsNsLcmOpOccIdContinuePostCall(nsLcmOpOccId, version, authorization, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Continue a NS lifecycle management operation occurrence.
     * The POST method initiates continuing an NS lifecycle operation if that operation has experienced a temporary failure, i.e. the related \&quot;NS LCM operation occurrence\&quot; is in \&quot;FAILED_TEMP\&quot; state. This method shall follow the provisions specified in the Tables 6.4.13.3.1-1 and 6.4.13.3.1-2 for URI query parameters, request and response data structures, and response codes. 
     * @param nsLcmOpOccId Identifier of a NS lifecycle management operation occurrence to be continued.  (required)
     * @param version Version of the API requested to use when responding to this request.  (required)
     * @param authorization The authorization token for the request. Reference: IETF RFC 7235  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void nsLcmOpOccsNsLcmOpOccIdContinuePost(String nsLcmOpOccId, String version, String authorization) throws ApiException {
        nsLcmOpOccsNsLcmOpOccIdContinuePostWithHttpInfo(nsLcmOpOccId, version, authorization);
    }

    /**
     * Continue a NS lifecycle management operation occurrence.
     * The POST method initiates continuing an NS lifecycle operation if that operation has experienced a temporary failure, i.e. the related \&quot;NS LCM operation occurrence\&quot; is in \&quot;FAILED_TEMP\&quot; state. This method shall follow the provisions specified in the Tables 6.4.13.3.1-1 and 6.4.13.3.1-2 for URI query parameters, request and response data structures, and response codes. 
     * @param nsLcmOpOccId Identifier of a NS lifecycle management operation occurrence to be continued.  (required)
     * @param version Version of the API requested to use when responding to this request.  (required)
     * @param authorization The authorization token for the request. Reference: IETF RFC 7235  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> nsLcmOpOccsNsLcmOpOccIdContinuePostWithHttpInfo(String nsLcmOpOccId, String version, String authorization) throws ApiException {
        com.squareup.okhttp.Call call = nsLcmOpOccsNsLcmOpOccIdContinuePostValidateBeforeCall(nsLcmOpOccId, version, authorization, null, null);
        return apiClient.execute(call);
    }

    /**
     * Continue a NS lifecycle management operation occurrence. (asynchronously)
     * The POST method initiates continuing an NS lifecycle operation if that operation has experienced a temporary failure, i.e. the related \&quot;NS LCM operation occurrence\&quot; is in \&quot;FAILED_TEMP\&quot; state. This method shall follow the provisions specified in the Tables 6.4.13.3.1-1 and 6.4.13.3.1-2 for URI query parameters, request and response data structures, and response codes. 
     * @param nsLcmOpOccId Identifier of a NS lifecycle management operation occurrence to be continued.  (required)
     * @param version Version of the API requested to use when responding to this request.  (required)
     * @param authorization The authorization token for the request. Reference: IETF RFC 7235  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call nsLcmOpOccsNsLcmOpOccIdContinuePostAsync(String nsLcmOpOccId, String version, String authorization, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = nsLcmOpOccsNsLcmOpOccIdContinuePostValidateBeforeCall(nsLcmOpOccId, version, authorization, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for nsLcmOpOccsNsLcmOpOccIdGet
     * @param nsLcmOpOccId Identifier of a NS lifecycle management operation occurrence.  (required)
     * @param accept Content-Types that are acceptable for the response. Reference: IETF RFC 7231  (required)
     * @param contentType The MIME type of the body of the request. Reference: IETF RFC 7231  (required)
     * @param version Version of the API requested to use when responding to this request.  (required)
     * @param authorization The authorization token for the request. Reference: IETF RFC 7235  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call nsLcmOpOccsNsLcmOpOccIdGetCall(String nsLcmOpOccId, String accept, String contentType, String version, String authorization, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/ns_lcm_op_occs/{nsLcmOpOccId}"
            .replaceAll("\\{" + "nsLcmOpOccId" + "\\}", apiClient.escapeString(nsLcmOpOccId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (accept != null)
        localVarHeaderParams.put("Accept", apiClient.parameterToString(accept));
        if (authorization != null)
        localVarHeaderParams.put("Authorization", apiClient.parameterToString(authorization));
        if (contentType != null)
        localVarHeaderParams.put("Content-Type", apiClient.parameterToString(contentType));
        if (version != null)
        localVarHeaderParams.put("Version", apiClient.parameterToString(version));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call nsLcmOpOccsNsLcmOpOccIdGetValidateBeforeCall(String nsLcmOpOccId, String accept, String contentType, String version, String authorization, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'nsLcmOpOccId' is set
        if (nsLcmOpOccId == null) {
            throw new ApiException("Missing the required parameter 'nsLcmOpOccId' when calling nsLcmOpOccsNsLcmOpOccIdGet(Async)");
        }
        
        // verify the required parameter 'accept' is set
        if (accept == null) {
            throw new ApiException("Missing the required parameter 'accept' when calling nsLcmOpOccsNsLcmOpOccIdGet(Async)");
        }
        
        // verify the required parameter 'contentType' is set
        if (contentType == null) {
            throw new ApiException("Missing the required parameter 'contentType' when calling nsLcmOpOccsNsLcmOpOccIdGet(Async)");
        }
        
        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling nsLcmOpOccsNsLcmOpOccIdGet(Async)");
        }
        

        com.squareup.okhttp.Call call = nsLcmOpOccsNsLcmOpOccIdGetCall(nsLcmOpOccId, accept, contentType, version, authorization, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Read an individual NS LCM operation occurrence resource.
     * The client can use this method to retrieve status information about a NS lifecycle management operation occurrence by reading an individual \&quot;NS LCM operation occurrence\&quot; resource. This method shall follow the provisions specified in the Tables 6.4.10.3.2-1 and 6.4.10.3.2-2 for URI query parameters, request and response data structures, and response codes. 
     * @param nsLcmOpOccId Identifier of a NS lifecycle management operation occurrence.  (required)
     * @param accept Content-Types that are acceptable for the response. Reference: IETF RFC 7231  (required)
     * @param contentType The MIME type of the body of the request. Reference: IETF RFC 7231  (required)
     * @param version Version of the API requested to use when responding to this request.  (required)
     * @param authorization The authorization token for the request. Reference: IETF RFC 7235  (optional)
     * @return NsLcmOpOcc
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public NsLcmOpOcc nsLcmOpOccsNsLcmOpOccIdGet(String nsLcmOpOccId, String accept, String contentType, String version, String authorization) throws ApiException {
        ApiResponse<NsLcmOpOcc> resp = nsLcmOpOccsNsLcmOpOccIdGetWithHttpInfo(nsLcmOpOccId, accept, contentType, version, authorization);
        return resp.getData();
    }

    /**
     * Read an individual NS LCM operation occurrence resource.
     * The client can use this method to retrieve status information about a NS lifecycle management operation occurrence by reading an individual \&quot;NS LCM operation occurrence\&quot; resource. This method shall follow the provisions specified in the Tables 6.4.10.3.2-1 and 6.4.10.3.2-2 for URI query parameters, request and response data structures, and response codes. 
     * @param nsLcmOpOccId Identifier of a NS lifecycle management operation occurrence.  (required)
     * @param accept Content-Types that are acceptable for the response. Reference: IETF RFC 7231  (required)
     * @param contentType The MIME type of the body of the request. Reference: IETF RFC 7231  (required)
     * @param version Version of the API requested to use when responding to this request.  (required)
     * @param authorization The authorization token for the request. Reference: IETF RFC 7235  (optional)
     * @return ApiResponse&lt;NsLcmOpOcc&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<NsLcmOpOcc> nsLcmOpOccsNsLcmOpOccIdGetWithHttpInfo(String nsLcmOpOccId, String accept, String contentType, String version, String authorization) throws ApiException {
        com.squareup.okhttp.Call call = nsLcmOpOccsNsLcmOpOccIdGetValidateBeforeCall(nsLcmOpOccId, accept, contentType, version, authorization, null, null);
        Type localVarReturnType = new TypeToken<NsLcmOpOcc>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Read an individual NS LCM operation occurrence resource. (asynchronously)
     * The client can use this method to retrieve status information about a NS lifecycle management operation occurrence by reading an individual \&quot;NS LCM operation occurrence\&quot; resource. This method shall follow the provisions specified in the Tables 6.4.10.3.2-1 and 6.4.10.3.2-2 for URI query parameters, request and response data structures, and response codes. 
     * @param nsLcmOpOccId Identifier of a NS lifecycle management operation occurrence.  (required)
     * @param accept Content-Types that are acceptable for the response. Reference: IETF RFC 7231  (required)
     * @param contentType The MIME type of the body of the request. Reference: IETF RFC 7231  (required)
     * @param version Version of the API requested to use when responding to this request.  (required)
     * @param authorization The authorization token for the request. Reference: IETF RFC 7235  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call nsLcmOpOccsNsLcmOpOccIdGetAsync(String nsLcmOpOccId, String accept, String contentType, String version, String authorization, final ApiCallback<NsLcmOpOcc> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = nsLcmOpOccsNsLcmOpOccIdGetValidateBeforeCall(nsLcmOpOccId, accept, contentType, version, authorization, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<NsLcmOpOcc>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for nsLcmOpOccsNsLcmOpOccIdRetryPost
     * @param nsLcmOpOccId Identifier of a NS lifecycle management operation occurrence to be retried. This identifier can be retrieved from the resource referenced by the \&quot;Location\&quot; HTTP header in the response to a POST request triggering a NS LCM operation. It can also be retrieved from the \&quot;nsLcmOpOccId\&quot; attribute in the NsLcmOperationOccurrenceNotification.  (required)
     * @param version Version of the API requested to use when responding to this request.  (required)
     * @param authorization The authorization token for the request. Reference: IETF RFC 7235  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call nsLcmOpOccsNsLcmOpOccIdRetryPostCall(String nsLcmOpOccId, String version, String authorization, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/ns_lcm_op_occs/{nsLcmOpOccId}/retry"
            .replaceAll("\\{" + "nsLcmOpOccId" + "\\}", apiClient.escapeString(nsLcmOpOccId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (authorization != null)
        localVarHeaderParams.put("Authorization", apiClient.parameterToString(authorization));
        if (version != null)
        localVarHeaderParams.put("Version", apiClient.parameterToString(version));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call nsLcmOpOccsNsLcmOpOccIdRetryPostValidateBeforeCall(String nsLcmOpOccId, String version, String authorization, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'nsLcmOpOccId' is set
        if (nsLcmOpOccId == null) {
            throw new ApiException("Missing the required parameter 'nsLcmOpOccId' when calling nsLcmOpOccsNsLcmOpOccIdRetryPost(Async)");
        }
        
        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling nsLcmOpOccsNsLcmOpOccIdRetryPost(Async)");
        }
        

        com.squareup.okhttp.Call call = nsLcmOpOccsNsLcmOpOccIdRetryPostCall(nsLcmOpOccId, version, authorization, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retry a NS lifecycle management operation occurrence.
     * The POST method initiates retrying a NS lifecycle management operation if that operation has experienced a temporary failure, i.e. the related \&quot;NS LCM operation occurrence\&quot; is in \&quot;FAILED_TEMP\&quot; state. This method shall follow the provisions specified in the Tables 6.4.11.3.1-1 and 6.4.11.3.1-2 for URI query parameters, request and response data structures, and response codes. 
     * @param nsLcmOpOccId Identifier of a NS lifecycle management operation occurrence to be retried. This identifier can be retrieved from the resource referenced by the \&quot;Location\&quot; HTTP header in the response to a POST request triggering a NS LCM operation. It can also be retrieved from the \&quot;nsLcmOpOccId\&quot; attribute in the NsLcmOperationOccurrenceNotification.  (required)
     * @param version Version of the API requested to use when responding to this request.  (required)
     * @param authorization The authorization token for the request. Reference: IETF RFC 7235  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void nsLcmOpOccsNsLcmOpOccIdRetryPost(String nsLcmOpOccId, String version, String authorization) throws ApiException {
        nsLcmOpOccsNsLcmOpOccIdRetryPostWithHttpInfo(nsLcmOpOccId, version, authorization);
    }

    /**
     * Retry a NS lifecycle management operation occurrence.
     * The POST method initiates retrying a NS lifecycle management operation if that operation has experienced a temporary failure, i.e. the related \&quot;NS LCM operation occurrence\&quot; is in \&quot;FAILED_TEMP\&quot; state. This method shall follow the provisions specified in the Tables 6.4.11.3.1-1 and 6.4.11.3.1-2 for URI query parameters, request and response data structures, and response codes. 
     * @param nsLcmOpOccId Identifier of a NS lifecycle management operation occurrence to be retried. This identifier can be retrieved from the resource referenced by the \&quot;Location\&quot; HTTP header in the response to a POST request triggering a NS LCM operation. It can also be retrieved from the \&quot;nsLcmOpOccId\&quot; attribute in the NsLcmOperationOccurrenceNotification.  (required)
     * @param version Version of the API requested to use when responding to this request.  (required)
     * @param authorization The authorization token for the request. Reference: IETF RFC 7235  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> nsLcmOpOccsNsLcmOpOccIdRetryPostWithHttpInfo(String nsLcmOpOccId, String version, String authorization) throws ApiException {
        com.squareup.okhttp.Call call = nsLcmOpOccsNsLcmOpOccIdRetryPostValidateBeforeCall(nsLcmOpOccId, version, authorization, null, null);
        return apiClient.execute(call);
    }

    /**
     * Retry a NS lifecycle management operation occurrence. (asynchronously)
     * The POST method initiates retrying a NS lifecycle management operation if that operation has experienced a temporary failure, i.e. the related \&quot;NS LCM operation occurrence\&quot; is in \&quot;FAILED_TEMP\&quot; state. This method shall follow the provisions specified in the Tables 6.4.11.3.1-1 and 6.4.11.3.1-2 for URI query parameters, request and response data structures, and response codes. 
     * @param nsLcmOpOccId Identifier of a NS lifecycle management operation occurrence to be retried. This identifier can be retrieved from the resource referenced by the \&quot;Location\&quot; HTTP header in the response to a POST request triggering a NS LCM operation. It can also be retrieved from the \&quot;nsLcmOpOccId\&quot; attribute in the NsLcmOperationOccurrenceNotification.  (required)
     * @param version Version of the API requested to use when responding to this request.  (required)
     * @param authorization The authorization token for the request. Reference: IETF RFC 7235  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call nsLcmOpOccsNsLcmOpOccIdRetryPostAsync(String nsLcmOpOccId, String version, String authorization, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = nsLcmOpOccsNsLcmOpOccIdRetryPostValidateBeforeCall(nsLcmOpOccId, version, authorization, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for nsLcmOpOccsNsLcmOpOccIdRollbackPost
     * @param nsLcmOpOccId Identifier of a NS lifecycle management operation occurrence to be rolled back. This identifier can be retrieved from the resource referenced by the \&quot;Location\&quot; HTTP header in the response to a POST request triggering a NS LCM operation. It can also be retrieved from the \&quot;nsLcmOpOccId\&quot; attribute in the NsLcmOperationOccurrenceNotification.  (required)
     * @param version Version of the API requested to use when responding to this request.  (required)
     * @param authorization The authorization token for the request. Reference: IETF RFC 7235  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call nsLcmOpOccsNsLcmOpOccIdRollbackPostCall(String nsLcmOpOccId, String version, String authorization, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/ns_lcm_op_occs/{nsLcmOpOccId}/rollback"
            .replaceAll("\\{" + "nsLcmOpOccId" + "\\}", apiClient.escapeString(nsLcmOpOccId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (authorization != null)
        localVarHeaderParams.put("Authorization", apiClient.parameterToString(authorization));
        if (version != null)
        localVarHeaderParams.put("Version", apiClient.parameterToString(version));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call nsLcmOpOccsNsLcmOpOccIdRollbackPostValidateBeforeCall(String nsLcmOpOccId, String version, String authorization, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'nsLcmOpOccId' is set
        if (nsLcmOpOccId == null) {
            throw new ApiException("Missing the required parameter 'nsLcmOpOccId' when calling nsLcmOpOccsNsLcmOpOccIdRollbackPost(Async)");
        }
        
        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling nsLcmOpOccsNsLcmOpOccIdRollbackPost(Async)");
        }
        

        com.squareup.okhttp.Call call = nsLcmOpOccsNsLcmOpOccIdRollbackPostCall(nsLcmOpOccId, version, authorization, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Rollback a NS lifecycle management operation occurrence.
     * The POST method initiates rolling back a NS lifecycle operation if that operation has experienced a temporary failure, i.e. the related \&quot;NS LCM operation occurrence\&quot; is in \&quot;FAILED_TEMP\&quot; state. This method shall follow the provisions specified in the Tables 6.4.12.3.1-1 and 6.4.12.3.1-2 for URI query parameters, request and response data structures, and response codes. 
     * @param nsLcmOpOccId Identifier of a NS lifecycle management operation occurrence to be rolled back. This identifier can be retrieved from the resource referenced by the \&quot;Location\&quot; HTTP header in the response to a POST request triggering a NS LCM operation. It can also be retrieved from the \&quot;nsLcmOpOccId\&quot; attribute in the NsLcmOperationOccurrenceNotification.  (required)
     * @param version Version of the API requested to use when responding to this request.  (required)
     * @param authorization The authorization token for the request. Reference: IETF RFC 7235  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void nsLcmOpOccsNsLcmOpOccIdRollbackPost(String nsLcmOpOccId, String version, String authorization) throws ApiException {
        nsLcmOpOccsNsLcmOpOccIdRollbackPostWithHttpInfo(nsLcmOpOccId, version, authorization);
    }

    /**
     * Rollback a NS lifecycle management operation occurrence.
     * The POST method initiates rolling back a NS lifecycle operation if that operation has experienced a temporary failure, i.e. the related \&quot;NS LCM operation occurrence\&quot; is in \&quot;FAILED_TEMP\&quot; state. This method shall follow the provisions specified in the Tables 6.4.12.3.1-1 and 6.4.12.3.1-2 for URI query parameters, request and response data structures, and response codes. 
     * @param nsLcmOpOccId Identifier of a NS lifecycle management operation occurrence to be rolled back. This identifier can be retrieved from the resource referenced by the \&quot;Location\&quot; HTTP header in the response to a POST request triggering a NS LCM operation. It can also be retrieved from the \&quot;nsLcmOpOccId\&quot; attribute in the NsLcmOperationOccurrenceNotification.  (required)
     * @param version Version of the API requested to use when responding to this request.  (required)
     * @param authorization The authorization token for the request. Reference: IETF RFC 7235  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> nsLcmOpOccsNsLcmOpOccIdRollbackPostWithHttpInfo(String nsLcmOpOccId, String version, String authorization) throws ApiException {
        com.squareup.okhttp.Call call = nsLcmOpOccsNsLcmOpOccIdRollbackPostValidateBeforeCall(nsLcmOpOccId, version, authorization, null, null);
        return apiClient.execute(call);
    }

    /**
     * Rollback a NS lifecycle management operation occurrence. (asynchronously)
     * The POST method initiates rolling back a NS lifecycle operation if that operation has experienced a temporary failure, i.e. the related \&quot;NS LCM operation occurrence\&quot; is in \&quot;FAILED_TEMP\&quot; state. This method shall follow the provisions specified in the Tables 6.4.12.3.1-1 and 6.4.12.3.1-2 for URI query parameters, request and response data structures, and response codes. 
     * @param nsLcmOpOccId Identifier of a NS lifecycle management operation occurrence to be rolled back. This identifier can be retrieved from the resource referenced by the \&quot;Location\&quot; HTTP header in the response to a POST request triggering a NS LCM operation. It can also be retrieved from the \&quot;nsLcmOpOccId\&quot; attribute in the NsLcmOperationOccurrenceNotification.  (required)
     * @param version Version of the API requested to use when responding to this request.  (required)
     * @param authorization The authorization token for the request. Reference: IETF RFC 7235  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call nsLcmOpOccsNsLcmOpOccIdRollbackPostAsync(String nsLcmOpOccId, String version, String authorization, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = nsLcmOpOccsNsLcmOpOccIdRollbackPostValidateBeforeCall(nsLcmOpOccId, version, authorization, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for nslcmV1NsLcmOpOccsNsLcmOpOccIdCancelPost
     * @param nsLcmOpOccId Identifier of a NS lifecycle management operation occurrence to be canceled. This identifier can be retrieved from the resource referenced by the \&quot;Location\&quot; HTTP header in the response to a POST request triggering a NS LCM operation. It can also be retrieved from the \&quot;nsLcmOpOccId\&quot; attribute in the NsLcmOperationOccurrenceNotification.  (required)
     * @param accept Content-Types that are acceptable for the response. Reference: IETF RFC 7231  (required)
     * @param contentType The MIME type of the body of the request. Reference: IETF RFC 7231  (required)
     * @param version Version of the API requested to use when responding to this request.  (required)
     * @param body The POST request to this resource shall include a CancelMode structure in the payload body to choose between \&quot;graceful\&quot; and \&quot;forceful\&quot; cancellation.  (required)
     * @param authorization The authorization token for the request. Reference: IETF RFC 7235  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call nslcmV1NsLcmOpOccsNsLcmOpOccIdCancelPostCall(String nsLcmOpOccId, String accept, String contentType, String version, CancelMode body, String authorization, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/nslcm/v1/ns_lcm_op_occs/{nsLcmOpOccId}/cancel"
            .replaceAll("\\{" + "nsLcmOpOccId" + "\\}", apiClient.escapeString(nsLcmOpOccId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (accept != null)
        localVarHeaderParams.put("Accept", apiClient.parameterToString(accept));
        if (authorization != null)
        localVarHeaderParams.put("Authorization", apiClient.parameterToString(authorization));
        if (contentType != null)
        localVarHeaderParams.put("Content-Type", apiClient.parameterToString(contentType));
        if (version != null)
        localVarHeaderParams.put("Version", apiClient.parameterToString(version));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call nslcmV1NsLcmOpOccsNsLcmOpOccIdCancelPostValidateBeforeCall(String nsLcmOpOccId, String accept, String contentType, String version, CancelMode body, String authorization, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'nsLcmOpOccId' is set
        if (nsLcmOpOccId == null) {
            throw new ApiException("Missing the required parameter 'nsLcmOpOccId' when calling nslcmV1NsLcmOpOccsNsLcmOpOccIdCancelPost(Async)");
        }
        
        // verify the required parameter 'accept' is set
        if (accept == null) {
            throw new ApiException("Missing the required parameter 'accept' when calling nslcmV1NsLcmOpOccsNsLcmOpOccIdCancelPost(Async)");
        }
        
        // verify the required parameter 'contentType' is set
        if (contentType == null) {
            throw new ApiException("Missing the required parameter 'contentType' when calling nslcmV1NsLcmOpOccsNsLcmOpOccIdCancelPost(Async)");
        }
        
        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling nslcmV1NsLcmOpOccsNsLcmOpOccIdCancelPost(Async)");
        }
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling nslcmV1NsLcmOpOccsNsLcmOpOccIdCancelPost(Async)");
        }
        

        com.squareup.okhttp.Call call = nslcmV1NsLcmOpOccsNsLcmOpOccIdCancelPostCall(nsLcmOpOccId, accept, contentType, version, body, authorization, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Cancel a NS lifecycle management operation occurrence.
     * The POST method initiates canceling an ongoing NS lifecycle management operation while it is being executed or rolled back, i.e. the related \&quot;NS LCM operation occurrence\&quot; is either in \&quot;PROCESSING\&quot; or \&quot;ROLLING_BACK\&quot; state. This method shall follow the provisions specified in the Tables 6.4.15.3.1-1 and 6.4.15.3.1-2 for URI query parameters, request and response data structures, and response codes. 
     * @param nsLcmOpOccId Identifier of a NS lifecycle management operation occurrence to be canceled. This identifier can be retrieved from the resource referenced by the \&quot;Location\&quot; HTTP header in the response to a POST request triggering a NS LCM operation. It can also be retrieved from the \&quot;nsLcmOpOccId\&quot; attribute in the NsLcmOperationOccurrenceNotification.  (required)
     * @param accept Content-Types that are acceptable for the response. Reference: IETF RFC 7231  (required)
     * @param contentType The MIME type of the body of the request. Reference: IETF RFC 7231  (required)
     * @param version Version of the API requested to use when responding to this request.  (required)
     * @param body The POST request to this resource shall include a CancelMode structure in the payload body to choose between \&quot;graceful\&quot; and \&quot;forceful\&quot; cancellation.  (required)
     * @param authorization The authorization token for the request. Reference: IETF RFC 7235  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void nslcmV1NsLcmOpOccsNsLcmOpOccIdCancelPost(String nsLcmOpOccId, String accept, String contentType, String version, CancelMode body, String authorization) throws ApiException {
        nslcmV1NsLcmOpOccsNsLcmOpOccIdCancelPostWithHttpInfo(nsLcmOpOccId, accept, contentType, version, body, authorization);
    }

    /**
     * Cancel a NS lifecycle management operation occurrence.
     * The POST method initiates canceling an ongoing NS lifecycle management operation while it is being executed or rolled back, i.e. the related \&quot;NS LCM operation occurrence\&quot; is either in \&quot;PROCESSING\&quot; or \&quot;ROLLING_BACK\&quot; state. This method shall follow the provisions specified in the Tables 6.4.15.3.1-1 and 6.4.15.3.1-2 for URI query parameters, request and response data structures, and response codes. 
     * @param nsLcmOpOccId Identifier of a NS lifecycle management operation occurrence to be canceled. This identifier can be retrieved from the resource referenced by the \&quot;Location\&quot; HTTP header in the response to a POST request triggering a NS LCM operation. It can also be retrieved from the \&quot;nsLcmOpOccId\&quot; attribute in the NsLcmOperationOccurrenceNotification.  (required)
     * @param accept Content-Types that are acceptable for the response. Reference: IETF RFC 7231  (required)
     * @param contentType The MIME type of the body of the request. Reference: IETF RFC 7231  (required)
     * @param version Version of the API requested to use when responding to this request.  (required)
     * @param body The POST request to this resource shall include a CancelMode structure in the payload body to choose between \&quot;graceful\&quot; and \&quot;forceful\&quot; cancellation.  (required)
     * @param authorization The authorization token for the request. Reference: IETF RFC 7235  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> nslcmV1NsLcmOpOccsNsLcmOpOccIdCancelPostWithHttpInfo(String nsLcmOpOccId, String accept, String contentType, String version, CancelMode body, String authorization) throws ApiException {
        com.squareup.okhttp.Call call = nslcmV1NsLcmOpOccsNsLcmOpOccIdCancelPostValidateBeforeCall(nsLcmOpOccId, accept, contentType, version, body, authorization, null, null);
        return apiClient.execute(call);
    }

    /**
     * Cancel a NS lifecycle management operation occurrence. (asynchronously)
     * The POST method initiates canceling an ongoing NS lifecycle management operation while it is being executed or rolled back, i.e. the related \&quot;NS LCM operation occurrence\&quot; is either in \&quot;PROCESSING\&quot; or \&quot;ROLLING_BACK\&quot; state. This method shall follow the provisions specified in the Tables 6.4.15.3.1-1 and 6.4.15.3.1-2 for URI query parameters, request and response data structures, and response codes. 
     * @param nsLcmOpOccId Identifier of a NS lifecycle management operation occurrence to be canceled. This identifier can be retrieved from the resource referenced by the \&quot;Location\&quot; HTTP header in the response to a POST request triggering a NS LCM operation. It can also be retrieved from the \&quot;nsLcmOpOccId\&quot; attribute in the NsLcmOperationOccurrenceNotification.  (required)
     * @param accept Content-Types that are acceptable for the response. Reference: IETF RFC 7231  (required)
     * @param contentType The MIME type of the body of the request. Reference: IETF RFC 7231  (required)
     * @param version Version of the API requested to use when responding to this request.  (required)
     * @param body The POST request to this resource shall include a CancelMode structure in the payload body to choose between \&quot;graceful\&quot; and \&quot;forceful\&quot; cancellation.  (required)
     * @param authorization The authorization token for the request. Reference: IETF RFC 7235  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call nslcmV1NsLcmOpOccsNsLcmOpOccIdCancelPostAsync(String nsLcmOpOccId, String accept, String contentType, String version, CancelMode body, String authorization, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = nslcmV1NsLcmOpOccsNsLcmOpOccIdCancelPostValidateBeforeCall(nsLcmOpOccId, accept, contentType, version, body, authorization, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for nslcmV1NsLcmOpOccsNsLcmOpOccIdFailPost
     * @param nsLcmOpOccId Identifier of a NS lifecycle management operation occurrence to be marked as \&quot;failed\&quot;. This identifier can be retrieved from the resource referenced by he \&quot;Location\&quot; HTTP header in the response to a POST request triggering a NS LCM operation. It can also be retrieved from the \&quot;nsLcmOpOccId\&quot; attribute in the NsLcmOperationOccurrenceNotification.  (required)
     * @param accept Content-Types that are acceptable for the response. Reference: IETF RFC 7231  (required)
     * @param version Version of the API requested to use when responding to this request.  (required)
     * @param authorization The authorization token for the request. Reference: IETF RFC 7235  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call nslcmV1NsLcmOpOccsNsLcmOpOccIdFailPostCall(String nsLcmOpOccId, String accept, String version, String authorization, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/nslcm/v1/ns_lcm_op_occs/{nsLcmOpOccId}/fail"
            .replaceAll("\\{" + "nsLcmOpOccId" + "\\}", apiClient.escapeString(nsLcmOpOccId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (accept != null)
        localVarHeaderParams.put("Accept", apiClient.parameterToString(accept));
        if (authorization != null)
        localVarHeaderParams.put("Authorization", apiClient.parameterToString(authorization));
        if (version != null)
        localVarHeaderParams.put("Version", apiClient.parameterToString(version));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call nslcmV1NsLcmOpOccsNsLcmOpOccIdFailPostValidateBeforeCall(String nsLcmOpOccId, String accept, String version, String authorization, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'nsLcmOpOccId' is set
        if (nsLcmOpOccId == null) {
            throw new ApiException("Missing the required parameter 'nsLcmOpOccId' when calling nslcmV1NsLcmOpOccsNsLcmOpOccIdFailPost(Async)");
        }
        
        // verify the required parameter 'accept' is set
        if (accept == null) {
            throw new ApiException("Missing the required parameter 'accept' when calling nslcmV1NsLcmOpOccsNsLcmOpOccIdFailPost(Async)");
        }
        
        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling nslcmV1NsLcmOpOccsNsLcmOpOccIdFailPost(Async)");
        }
        

        com.squareup.okhttp.Call call = nslcmV1NsLcmOpOccsNsLcmOpOccIdFailPostCall(nsLcmOpOccId, accept, version, authorization, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Mark a NS lifecycle management operation occurrence as failed.
     * The POST method marks a NS lifecycle management operation occurrence as \&quot;finally failed\&quot; if that operation occurrence is in \&quot;FAILED_TEMP\&quot; state. 
     * @param nsLcmOpOccId Identifier of a NS lifecycle management operation occurrence to be marked as \&quot;failed\&quot;. This identifier can be retrieved from the resource referenced by he \&quot;Location\&quot; HTTP header in the response to a POST request triggering a NS LCM operation. It can also be retrieved from the \&quot;nsLcmOpOccId\&quot; attribute in the NsLcmOperationOccurrenceNotification.  (required)
     * @param accept Content-Types that are acceptable for the response. Reference: IETF RFC 7231  (required)
     * @param version Version of the API requested to use when responding to this request.  (required)
     * @param authorization The authorization token for the request. Reference: IETF RFC 7235  (optional)
     * @return NsLcmOpOcc
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public NsLcmOpOcc nslcmV1NsLcmOpOccsNsLcmOpOccIdFailPost(String nsLcmOpOccId, String accept, String version, String authorization) throws ApiException {
        ApiResponse<NsLcmOpOcc> resp = nslcmV1NsLcmOpOccsNsLcmOpOccIdFailPostWithHttpInfo(nsLcmOpOccId, accept, version, authorization);
        return resp.getData();
    }

    /**
     * Mark a NS lifecycle management operation occurrence as failed.
     * The POST method marks a NS lifecycle management operation occurrence as \&quot;finally failed\&quot; if that operation occurrence is in \&quot;FAILED_TEMP\&quot; state. 
     * @param nsLcmOpOccId Identifier of a NS lifecycle management operation occurrence to be marked as \&quot;failed\&quot;. This identifier can be retrieved from the resource referenced by he \&quot;Location\&quot; HTTP header in the response to a POST request triggering a NS LCM operation. It can also be retrieved from the \&quot;nsLcmOpOccId\&quot; attribute in the NsLcmOperationOccurrenceNotification.  (required)
     * @param accept Content-Types that are acceptable for the response. Reference: IETF RFC 7231  (required)
     * @param version Version of the API requested to use when responding to this request.  (required)
     * @param authorization The authorization token for the request. Reference: IETF RFC 7235  (optional)
     * @return ApiResponse&lt;NsLcmOpOcc&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<NsLcmOpOcc> nslcmV1NsLcmOpOccsNsLcmOpOccIdFailPostWithHttpInfo(String nsLcmOpOccId, String accept, String version, String authorization) throws ApiException {
        com.squareup.okhttp.Call call = nslcmV1NsLcmOpOccsNsLcmOpOccIdFailPostValidateBeforeCall(nsLcmOpOccId, accept, version, authorization, null, null);
        Type localVarReturnType = new TypeToken<NsLcmOpOcc>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Mark a NS lifecycle management operation occurrence as failed. (asynchronously)
     * The POST method marks a NS lifecycle management operation occurrence as \&quot;finally failed\&quot; if that operation occurrence is in \&quot;FAILED_TEMP\&quot; state. 
     * @param nsLcmOpOccId Identifier of a NS lifecycle management operation occurrence to be marked as \&quot;failed\&quot;. This identifier can be retrieved from the resource referenced by he \&quot;Location\&quot; HTTP header in the response to a POST request triggering a NS LCM operation. It can also be retrieved from the \&quot;nsLcmOpOccId\&quot; attribute in the NsLcmOperationOccurrenceNotification.  (required)
     * @param accept Content-Types that are acceptable for the response. Reference: IETF RFC 7231  (required)
     * @param version Version of the API requested to use when responding to this request.  (required)
     * @param authorization The authorization token for the request. Reference: IETF RFC 7235  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call nslcmV1NsLcmOpOccsNsLcmOpOccIdFailPostAsync(String nsLcmOpOccId, String accept, String version, String authorization, final ApiCallback<NsLcmOpOcc> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = nslcmV1NsLcmOpOccsNsLcmOpOccIdFailPostValidateBeforeCall(nsLcmOpOccId, accept, version, authorization, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<NsLcmOpOcc>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for subscriptionsGet
     * @param version Version of the API requested to use when responding to this request.  (required)
     * @param accept Content-Types that are acceptable for the response. Reference: IETF RFC 7231  (required)
     * @param authorization The authorization token for the request. Reference: IETF RFC 7235.  (optional)
     * @param filter Attribute-based filtering expression according to clause 4.3.2. The NFVO shall support receiving this parameter as part of the URI query string. The OSS/BSS may supply this parameter. All attribute names that appear in the LccnSubscription and in data types referenced from it shall be supported by the NFVO in the filter expression.  (optional)
     * @param nextpageOpaqueMarker Marker to obtain the next page of a paged response. Shall be supported by the NFVO if the NFVO supports alternative 2 (paging) according to clause 4.7.2.1 for this resource.  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call subscriptionsGetCall(String version, String accept, String authorization, String filter, String nextpageOpaqueMarker, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (filter != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("filter", filter));
        if (nextpageOpaqueMarker != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("nextpage_opaque_marker", nextpageOpaqueMarker));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (authorization != null)
        localVarHeaderParams.put("Authorization", apiClient.parameterToString(authorization));
        if (version != null)
        localVarHeaderParams.put("Version", apiClient.parameterToString(version));
        if (accept != null)
        localVarHeaderParams.put("Accept", apiClient.parameterToString(accept));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call subscriptionsGetValidateBeforeCall(String version, String accept, String authorization, String filter, String nextpageOpaqueMarker, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling subscriptionsGet(Async)");
        }
        
        // verify the required parameter 'accept' is set
        if (accept == null) {
            throw new ApiException("Missing the required parameter 'accept' when calling subscriptionsGet(Async)");
        }
        

        com.squareup.okhttp.Call call = subscriptionsGetCall(version, accept, authorization, filter, nextpageOpaqueMarker, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Query multiple subscriptions.
     * Query Subscription Information. The GET method queries the list of active subscriptions of the functional block that invokes the method. It can be used e.g. for resynchronization after error situations. 
     * @param version Version of the API requested to use when responding to this request.  (required)
     * @param accept Content-Types that are acceptable for the response. Reference: IETF RFC 7231  (required)
     * @param authorization The authorization token for the request. Reference: IETF RFC 7235.  (optional)
     * @param filter Attribute-based filtering expression according to clause 4.3.2. The NFVO shall support receiving this parameter as part of the URI query string. The OSS/BSS may supply this parameter. All attribute names that appear in the LccnSubscription and in data types referenced from it shall be supported by the NFVO in the filter expression.  (optional)
     * @param nextpageOpaqueMarker Marker to obtain the next page of a paged response. Shall be supported by the NFVO if the NFVO supports alternative 2 (paging) according to clause 4.7.2.1 for this resource.  (optional)
     * @return List&lt;LccnSubscription&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<LccnSubscription> subscriptionsGet(String version, String accept, String authorization, String filter, String nextpageOpaqueMarker) throws ApiException {
        ApiResponse<List<LccnSubscription>> resp = subscriptionsGetWithHttpInfo(version, accept, authorization, filter, nextpageOpaqueMarker);
        return resp.getData();
    }

    /**
     * Query multiple subscriptions.
     * Query Subscription Information. The GET method queries the list of active subscriptions of the functional block that invokes the method. It can be used e.g. for resynchronization after error situations. 
     * @param version Version of the API requested to use when responding to this request.  (required)
     * @param accept Content-Types that are acceptable for the response. Reference: IETF RFC 7231  (required)
     * @param authorization The authorization token for the request. Reference: IETF RFC 7235.  (optional)
     * @param filter Attribute-based filtering expression according to clause 4.3.2. The NFVO shall support receiving this parameter as part of the URI query string. The OSS/BSS may supply this parameter. All attribute names that appear in the LccnSubscription and in data types referenced from it shall be supported by the NFVO in the filter expression.  (optional)
     * @param nextpageOpaqueMarker Marker to obtain the next page of a paged response. Shall be supported by the NFVO if the NFVO supports alternative 2 (paging) according to clause 4.7.2.1 for this resource.  (optional)
     * @return ApiResponse&lt;List&lt;LccnSubscription&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<LccnSubscription>> subscriptionsGetWithHttpInfo(String version, String accept, String authorization, String filter, String nextpageOpaqueMarker) throws ApiException {
        com.squareup.okhttp.Call call = subscriptionsGetValidateBeforeCall(version, accept, authorization, filter, nextpageOpaqueMarker, null, null);
        Type localVarReturnType = new TypeToken<List<LccnSubscription>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Query multiple subscriptions. (asynchronously)
     * Query Subscription Information. The GET method queries the list of active subscriptions of the functional block that invokes the method. It can be used e.g. for resynchronization after error situations. 
     * @param version Version of the API requested to use when responding to this request.  (required)
     * @param accept Content-Types that are acceptable for the response. Reference: IETF RFC 7231  (required)
     * @param authorization The authorization token for the request. Reference: IETF RFC 7235.  (optional)
     * @param filter Attribute-based filtering expression according to clause 4.3.2. The NFVO shall support receiving this parameter as part of the URI query string. The OSS/BSS may supply this parameter. All attribute names that appear in the LccnSubscription and in data types referenced from it shall be supported by the NFVO in the filter expression.  (optional)
     * @param nextpageOpaqueMarker Marker to obtain the next page of a paged response. Shall be supported by the NFVO if the NFVO supports alternative 2 (paging) according to clause 4.7.2.1 for this resource.  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call subscriptionsGetAsync(String version, String accept, String authorization, String filter, String nextpageOpaqueMarker, final ApiCallback<List<LccnSubscription>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = subscriptionsGetValidateBeforeCall(version, accept, authorization, filter, nextpageOpaqueMarker, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<LccnSubscription>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for subscriptionsPost
     * @param version Version of the API requested to use when responding to this request.  (required)
     * @param accept Content-Types that are acceptable for the response. Reference: IETF RFC 7231  (required)
     * @param contentType The MIME type of the body of the request. Reference: IETF RFC 7231  (required)
     * @param body Details of the subscription to be created, as defined in clause 6.5.2.2.  (required)
     * @param authorization The authorization token for the request. Reference: IETF RFC 7235.  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call subscriptionsPostCall(String version, String accept, String contentType, LccnSubscriptionRequest body, String authorization, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/subscriptions";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (authorization != null)
        localVarHeaderParams.put("Authorization", apiClient.parameterToString(authorization));
        if (version != null)
        localVarHeaderParams.put("Version", apiClient.parameterToString(version));
        if (accept != null)
        localVarHeaderParams.put("Accept", apiClient.parameterToString(accept));
        if (contentType != null)
        localVarHeaderParams.put("Content-Type", apiClient.parameterToString(contentType));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call subscriptionsPostValidateBeforeCall(String version, String accept, String contentType, LccnSubscriptionRequest body, String authorization, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling subscriptionsPost(Async)");
        }
        
        // verify the required parameter 'accept' is set
        if (accept == null) {
            throw new ApiException("Missing the required parameter 'accept' when calling subscriptionsPost(Async)");
        }
        
        // verify the required parameter 'contentType' is set
        if (contentType == null) {
            throw new ApiException("Missing the required parameter 'contentType' when calling subscriptionsPost(Async)");
        }
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling subscriptionsPost(Async)");
        }
        

        com.squareup.okhttp.Call call = subscriptionsPostCall(version, accept, contentType, body, authorization, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Subscribe to NS lifecycle change notifications.
     * The POST method creates a new subscription. This method shall support the URI query parameters, request and response data structures, and response codes, as specified in the Tables 6.4.16.3.1-1 and 6.4.16.3.1-2. Creation of two subscription resources with the same callbackURI and the same filter can result in performance degradation and will provide duplicates of notifications to the OSS, and might make sense only in very rare use cases. Consequently, the NFVO may either allow creating a subscription resource if another subscription resource with the same filter and callbackUri already exists (in which case it shall return the \&quot;201 Created\&quot; response code), or may decide to not create a duplicate subscription resource (in which case it shall return a \&quot;303 See Other\&quot; response code referencing the existing subscription resource with the same filter and callbackUri). 
     * @param version Version of the API requested to use when responding to this request.  (required)
     * @param accept Content-Types that are acceptable for the response. Reference: IETF RFC 7231  (required)
     * @param contentType The MIME type of the body of the request. Reference: IETF RFC 7231  (required)
     * @param body Details of the subscription to be created, as defined in clause 6.5.2.2.  (required)
     * @param authorization The authorization token for the request. Reference: IETF RFC 7235.  (optional)
     * @return LccnSubscription
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public LccnSubscription subscriptionsPost(String version, String accept, String contentType, LccnSubscriptionRequest body, String authorization) throws ApiException {
        ApiResponse<LccnSubscription> resp = subscriptionsPostWithHttpInfo(version, accept, contentType, body, authorization);
        return resp.getData();
    }

    /**
     * Subscribe to NS lifecycle change notifications.
     * The POST method creates a new subscription. This method shall support the URI query parameters, request and response data structures, and response codes, as specified in the Tables 6.4.16.3.1-1 and 6.4.16.3.1-2. Creation of two subscription resources with the same callbackURI and the same filter can result in performance degradation and will provide duplicates of notifications to the OSS, and might make sense only in very rare use cases. Consequently, the NFVO may either allow creating a subscription resource if another subscription resource with the same filter and callbackUri already exists (in which case it shall return the \&quot;201 Created\&quot; response code), or may decide to not create a duplicate subscription resource (in which case it shall return a \&quot;303 See Other\&quot; response code referencing the existing subscription resource with the same filter and callbackUri). 
     * @param version Version of the API requested to use when responding to this request.  (required)
     * @param accept Content-Types that are acceptable for the response. Reference: IETF RFC 7231  (required)
     * @param contentType The MIME type of the body of the request. Reference: IETF RFC 7231  (required)
     * @param body Details of the subscription to be created, as defined in clause 6.5.2.2.  (required)
     * @param authorization The authorization token for the request. Reference: IETF RFC 7235.  (optional)
     * @return ApiResponse&lt;LccnSubscription&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<LccnSubscription> subscriptionsPostWithHttpInfo(String version, String accept, String contentType, LccnSubscriptionRequest body, String authorization) throws ApiException {
        com.squareup.okhttp.Call call = subscriptionsPostValidateBeforeCall(version, accept, contentType, body, authorization, null, null);
        Type localVarReturnType = new TypeToken<LccnSubscription>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Subscribe to NS lifecycle change notifications. (asynchronously)
     * The POST method creates a new subscription. This method shall support the URI query parameters, request and response data structures, and response codes, as specified in the Tables 6.4.16.3.1-1 and 6.4.16.3.1-2. Creation of two subscription resources with the same callbackURI and the same filter can result in performance degradation and will provide duplicates of notifications to the OSS, and might make sense only in very rare use cases. Consequently, the NFVO may either allow creating a subscription resource if another subscription resource with the same filter and callbackUri already exists (in which case it shall return the \&quot;201 Created\&quot; response code), or may decide to not create a duplicate subscription resource (in which case it shall return a \&quot;303 See Other\&quot; response code referencing the existing subscription resource with the same filter and callbackUri). 
     * @param version Version of the API requested to use when responding to this request.  (required)
     * @param accept Content-Types that are acceptable for the response. Reference: IETF RFC 7231  (required)
     * @param contentType The MIME type of the body of the request. Reference: IETF RFC 7231  (required)
     * @param body Details of the subscription to be created, as defined in clause 6.5.2.2.  (required)
     * @param authorization The authorization token for the request. Reference: IETF RFC 7235.  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call subscriptionsPostAsync(String version, String accept, String contentType, LccnSubscriptionRequest body, String authorization, final ApiCallback<LccnSubscription> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = subscriptionsPostValidateBeforeCall(version, accept, contentType, body, authorization, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<LccnSubscription>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for subscriptionsSubscriptionIdDelete
     * @param subscriptionId Identifier of this subscription.  (required)
     * @param version Version of the API requested to use when responding to this request.  (required)
     * @param authorization The authorization token for the request. Reference: IETF RFC 7235.  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call subscriptionsSubscriptionIdDeleteCall(String subscriptionId, String version, String authorization, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}"
            .replaceAll("\\{" + "subscriptionId" + "\\}", apiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (authorization != null)
        localVarHeaderParams.put("Authorization", apiClient.parameterToString(authorization));
        if (version != null)
        localVarHeaderParams.put("Version", apiClient.parameterToString(version));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call subscriptionsSubscriptionIdDeleteValidateBeforeCall(String subscriptionId, String version, String authorization, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling subscriptionsSubscriptionIdDelete(Async)");
        }
        
        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling subscriptionsSubscriptionIdDelete(Async)");
        }
        

        com.squareup.okhttp.Call call = subscriptionsSubscriptionIdDeleteCall(subscriptionId, version, authorization, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Terminate a subscription.
     * The DELETE method terminates an individual subscription. This method shall support the URI query parameters, request and response data structures, and response codes, as specified in the Tables 6.4.17.3.5-1 and 6.4.17.3.5-2. 
     * @param subscriptionId Identifier of this subscription.  (required)
     * @param version Version of the API requested to use when responding to this request.  (required)
     * @param authorization The authorization token for the request. Reference: IETF RFC 7235.  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void subscriptionsSubscriptionIdDelete(String subscriptionId, String version, String authorization) throws ApiException {
        subscriptionsSubscriptionIdDeleteWithHttpInfo(subscriptionId, version, authorization);
    }

    /**
     * Terminate a subscription.
     * The DELETE method terminates an individual subscription. This method shall support the URI query parameters, request and response data structures, and response codes, as specified in the Tables 6.4.17.3.5-1 and 6.4.17.3.5-2. 
     * @param subscriptionId Identifier of this subscription.  (required)
     * @param version Version of the API requested to use when responding to this request.  (required)
     * @param authorization The authorization token for the request. Reference: IETF RFC 7235.  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> subscriptionsSubscriptionIdDeleteWithHttpInfo(String subscriptionId, String version, String authorization) throws ApiException {
        com.squareup.okhttp.Call call = subscriptionsSubscriptionIdDeleteValidateBeforeCall(subscriptionId, version, authorization, null, null);
        return apiClient.execute(call);
    }

    /**
     * Terminate a subscription. (asynchronously)
     * The DELETE method terminates an individual subscription. This method shall support the URI query parameters, request and response data structures, and response codes, as specified in the Tables 6.4.17.3.5-1 and 6.4.17.3.5-2. 
     * @param subscriptionId Identifier of this subscription.  (required)
     * @param version Version of the API requested to use when responding to this request.  (required)
     * @param authorization The authorization token for the request. Reference: IETF RFC 7235.  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call subscriptionsSubscriptionIdDeleteAsync(String subscriptionId, String version, String authorization, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = subscriptionsSubscriptionIdDeleteValidateBeforeCall(subscriptionId, version, authorization, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for subscriptionsSubscriptionIdGet
     * @param subscriptionId Identifier of this subscription.  (required)
     * @param version Version of the API requested to use when responding to this request.  (required)
     * @param accept Content-Types that are acceptable for the response. Reference: IETF RFC 7231  (required)
     * @param authorization The authorization token for the request. Reference: IETF RFC 7235.  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call subscriptionsSubscriptionIdGetCall(String subscriptionId, String version, String accept, String authorization, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}"
            .replaceAll("\\{" + "subscriptionId" + "\\}", apiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (authorization != null)
        localVarHeaderParams.put("Authorization", apiClient.parameterToString(authorization));
        if (version != null)
        localVarHeaderParams.put("Version", apiClient.parameterToString(version));
        if (accept != null)
        localVarHeaderParams.put("Accept", apiClient.parameterToString(accept));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call subscriptionsSubscriptionIdGetValidateBeforeCall(String subscriptionId, String version, String accept, String authorization, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling subscriptionsSubscriptionIdGet(Async)");
        }
        
        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling subscriptionsSubscriptionIdGet(Async)");
        }
        
        // verify the required parameter 'accept' is set
        if (accept == null) {
            throw new ApiException("Missing the required parameter 'accept' when calling subscriptionsSubscriptionIdGet(Async)");
        }
        

        com.squareup.okhttp.Call call = subscriptionsSubscriptionIdGetCall(subscriptionId, version, accept, authorization, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Read an individual subscription resource.
     * The GET method retrieves information about a subscription by reading an individual subscription resource. This method shall support the URI query parameters, request and response data structures, and response codes, as specified in the Tables 6.4.17.3.2-1 and 6.4.17.3.2-2 
     * @param subscriptionId Identifier of this subscription.  (required)
     * @param version Version of the API requested to use when responding to this request.  (required)
     * @param accept Content-Types that are acceptable for the response. Reference: IETF RFC 7231  (required)
     * @param authorization The authorization token for the request. Reference: IETF RFC 7235.  (optional)
     * @return LccnSubscription
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public LccnSubscription subscriptionsSubscriptionIdGet(String subscriptionId, String version, String accept, String authorization) throws ApiException {
        ApiResponse<LccnSubscription> resp = subscriptionsSubscriptionIdGetWithHttpInfo(subscriptionId, version, accept, authorization);
        return resp.getData();
    }

    /**
     * Read an individual subscription resource.
     * The GET method retrieves information about a subscription by reading an individual subscription resource. This method shall support the URI query parameters, request and response data structures, and response codes, as specified in the Tables 6.4.17.3.2-1 and 6.4.17.3.2-2 
     * @param subscriptionId Identifier of this subscription.  (required)
     * @param version Version of the API requested to use when responding to this request.  (required)
     * @param accept Content-Types that are acceptable for the response. Reference: IETF RFC 7231  (required)
     * @param authorization The authorization token for the request. Reference: IETF RFC 7235.  (optional)
     * @return ApiResponse&lt;LccnSubscription&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<LccnSubscription> subscriptionsSubscriptionIdGetWithHttpInfo(String subscriptionId, String version, String accept, String authorization) throws ApiException {
        com.squareup.okhttp.Call call = subscriptionsSubscriptionIdGetValidateBeforeCall(subscriptionId, version, accept, authorization, null, null);
        Type localVarReturnType = new TypeToken<LccnSubscription>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Read an individual subscription resource. (asynchronously)
     * The GET method retrieves information about a subscription by reading an individual subscription resource. This method shall support the URI query parameters, request and response data structures, and response codes, as specified in the Tables 6.4.17.3.2-1 and 6.4.17.3.2-2 
     * @param subscriptionId Identifier of this subscription.  (required)
     * @param version Version of the API requested to use when responding to this request.  (required)
     * @param accept Content-Types that are acceptable for the response. Reference: IETF RFC 7231  (required)
     * @param authorization The authorization token for the request. Reference: IETF RFC 7235.  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call subscriptionsSubscriptionIdGetAsync(String subscriptionId, String version, String accept, String authorization, final ApiCallback<LccnSubscription> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = subscriptionsSubscriptionIdGetValidateBeforeCall(subscriptionId, version, accept, authorization, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<LccnSubscription>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
