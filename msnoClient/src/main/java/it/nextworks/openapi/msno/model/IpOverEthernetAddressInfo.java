/*
 * SOL005 - NS Lifecycle Management Interface
 * SOL005 - NS Lifecycle Management Interface IMPORTANT: Please note that this file might be not aligned to the current version of the ETSI Group Specification it refers to and has not been approved by the ETSI NFV ISG. In case of discrepancies the published ETSI Group Specification takes precedence. Please report bugs to https://forge.etsi.org/bugzilla/buglist.cgi?component=Nfv-Openapis 
 *
 * OpenAPI spec version: 1.1.0-impl:etsi.org:ETSI_NFV_OpenAPI:1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package it.nextworks.openapi.msno.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import it.nextworks.openapi.msno.model.IpOverEthernetAddressInfoAddressRange1;
import it.nextworks.openapi.msno.model.IpOverEthernetAddressInfoIpAddresses;

import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

/**
 * This type represents information about a network address that has been assigned. It shall comply with the provisions defined in Table 6.5.3.18-1. 
 */
@ApiModel(description = "This type represents information about a network address that has been assigned. It shall comply with the provisions defined in Table 6.5.3.18-1. ")
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2019-11-08T16:52:33.422+01:00")
public class IpOverEthernetAddressInfo {
  @SerializedName("macAddress")
  private String macAddress = null;

  @SerializedName("ipAddresses")
  private List<IpOverEthernetAddressInfoIpAddresses> ipAddresses = new ArrayList<IpOverEthernetAddressInfoIpAddresses>();

  /**
   * The type of the IP addresses 
   */
  @JsonAdapter(TypeEnum.Adapter.class)
  public enum TypeEnum {
    PV4("PV4"),
    
    PV6("PV6");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TypeEnum fromValue(String text) {
      for (TypeEnum b : TypeEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<TypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TypeEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return TypeEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("type")
  private TypeEnum type = null;

  @SerializedName("addresses")
  private List<String> addresses = new ArrayList<String>();

  @SerializedName("isDynamic")
  private Boolean isDynamic = null;

  @SerializedName("addressRange")
  private IpOverEthernetAddressInfoAddressRange1 addressRange = null;

  @SerializedName("minAddress")
  private String minAddress = null;

  @SerializedName("maxAddress")
  private String maxAddress = null;

  @SerializedName("subnetId")
  private String subnetId = null;

  public IpOverEthernetAddressInfo macAddress(String macAddress) {
    this.macAddress = macAddress;
    return this;
  }

   /**
   * Assigned MAC address. 
   * @return macAddress
  **/
  @ApiModelProperty(required = true, value = "Assigned MAC address. ")
  public String getMacAddress() {
    return macAddress;
  }

  public void setMacAddress(String macAddress) {
    this.macAddress = macAddress;
  }

  public IpOverEthernetAddressInfo ipAddresses(List<IpOverEthernetAddressInfoIpAddresses> ipAddresses) {
    this.ipAddresses = ipAddresses;
    return this;
  }

  public IpOverEthernetAddressInfo addIpAddressesItem(IpOverEthernetAddressInfoIpAddresses ipAddressesItem) {
    this.ipAddresses.add(ipAddressesItem);
    return this;
  }

   /**
   * Addresses assigned to the CP instance. Each entry represents IP addresses assigned by fixed or dynamic IP address assignment per subnet. 
   * @return ipAddresses
  **/
  @ApiModelProperty(required = true, value = "Addresses assigned to the CP instance. Each entry represents IP addresses assigned by fixed or dynamic IP address assignment per subnet. ")
  public List<IpOverEthernetAddressInfoIpAddresses> getIpAddresses() {
    return ipAddresses;
  }

  public void setIpAddresses(List<IpOverEthernetAddressInfoIpAddresses> ipAddresses) {
    this.ipAddresses = ipAddresses;
  }

  public IpOverEthernetAddressInfo type(TypeEnum type) {
    this.type = type;
    return this;
  }

   /**
   * The type of the IP addresses 
   * @return type
  **/
  @ApiModelProperty(value = "The type of the IP addresses ")
  public TypeEnum getType() {
    return type;
  }

  public void setType(TypeEnum type) {
    this.type = type;
  }

  public IpOverEthernetAddressInfo addresses(List<String> addresses) {
    this.addresses = addresses;
    return this;
  }

  public IpOverEthernetAddressInfo addAddressesItem(String addressesItem) {
    this.addresses.add(addressesItem);
    return this;
  }

   /**
   * Fixed addresses assigned (from the subnet defined by \&quot;subnetId\&quot; if provided). See note. 
   * @return addresses
  **/
  @ApiModelProperty(required = true, value = "Fixed addresses assigned (from the subnet defined by \"subnetId\" if provided). See note. ")
  public List<String> getAddresses() {
    return addresses;
  }

  public void setAddresses(List<String> addresses) {
    this.addresses = addresses;
  }

  public IpOverEthernetAddressInfo isDynamic(Boolean isDynamic) {
    this.isDynamic = isDynamic;
    return this;
  }

   /**
   * Indicates whether this set of addresses was assigned dynamically (true) or based on address information provided as input from the API consumer (false). Shall be present if \&quot;addresses\&quot; is present and shall be absent otherwise. 
   * @return isDynamic
  **/
  @ApiModelProperty(value = "Indicates whether this set of addresses was assigned dynamically (true) or based on address information provided as input from the API consumer (false). Shall be present if \"addresses\" is present and shall be absent otherwise. ")
  public Boolean isIsDynamic() {
    return isDynamic;
  }

  public void setIsDynamic(Boolean isDynamic) {
    this.isDynamic = isDynamic;
  }

  public IpOverEthernetAddressInfo addressRange(IpOverEthernetAddressInfoAddressRange1 addressRange) {
    this.addressRange = addressRange;
    return this;
  }

   /**
   * Get addressRange
   * @return addressRange
  **/
  @ApiModelProperty(required = true, value = "")
  public IpOverEthernetAddressInfoAddressRange1 getAddressRange() {
    return addressRange;
  }

  public void setAddressRange(IpOverEthernetAddressInfoAddressRange1 addressRange) {
    this.addressRange = addressRange;
  }

  public IpOverEthernetAddressInfo minAddress(String minAddress) {
    this.minAddress = minAddress;
    return this;
  }

   /**
   * Lowest IP address belonging to the range 
   * @return minAddress
  **/
  @ApiModelProperty(value = "Lowest IP address belonging to the range ")
  public String getMinAddress() {
    return minAddress;
  }

  public void setMinAddress(String minAddress) {
    this.minAddress = minAddress;
  }

  public IpOverEthernetAddressInfo maxAddress(String maxAddress) {
    this.maxAddress = maxAddress;
    return this;
  }

   /**
   * Highest IP address belonging to the range. 
   * @return maxAddress
  **/
  @ApiModelProperty(value = "Highest IP address belonging to the range. ")
  public String getMaxAddress() {
    return maxAddress;
  }

  public void setMaxAddress(String maxAddress) {
    this.maxAddress = maxAddress;
  }

  public IpOverEthernetAddressInfo subnetId(String subnetId) {
    this.subnetId = subnetId;
    return this;
  }

   /**
   * Subnet defined by the identifier of the subnet resource in the VIM. In case this attribute is present, IP addresses are bound to that subnet. 
   * @return subnetId
  **/
  @ApiModelProperty(required = true, value = "Subnet defined by the identifier of the subnet resource in the VIM. In case this attribute is present, IP addresses are bound to that subnet. ")
  public String getSubnetId() {
    return subnetId;
  }

  public void setSubnetId(String subnetId) {
    this.subnetId = subnetId;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    IpOverEthernetAddressInfo ipOverEthernetAddressInfo = (IpOverEthernetAddressInfo) o;
    return Objects.equals(this.macAddress, ipOverEthernetAddressInfo.macAddress) &&
        Objects.equals(this.ipAddresses, ipOverEthernetAddressInfo.ipAddresses) &&
        Objects.equals(this.type, ipOverEthernetAddressInfo.type) &&
        Objects.equals(this.addresses, ipOverEthernetAddressInfo.addresses) &&
        Objects.equals(this.isDynamic, ipOverEthernetAddressInfo.isDynamic) &&
        Objects.equals(this.addressRange, ipOverEthernetAddressInfo.addressRange) &&
        Objects.equals(this.minAddress, ipOverEthernetAddressInfo.minAddress) &&
        Objects.equals(this.maxAddress, ipOverEthernetAddressInfo.maxAddress) &&
        Objects.equals(this.subnetId, ipOverEthernetAddressInfo.subnetId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(macAddress, ipAddresses, type, addresses, isDynamic, addressRange, minAddress, maxAddress, subnetId);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class IpOverEthernetAddressInfo {\n");
    
    sb.append("    macAddress: ").append(toIndentedString(macAddress)).append("\n");
    sb.append("    ipAddresses: ").append(toIndentedString(ipAddresses)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    addresses: ").append(toIndentedString(addresses)).append("\n");
    sb.append("    isDynamic: ").append(toIndentedString(isDynamic)).append("\n");
    sb.append("    addressRange: ").append(toIndentedString(addressRange)).append("\n");
    sb.append("    minAddress: ").append(toIndentedString(minAddress)).append("\n");
    sb.append("    maxAddress: ").append(toIndentedString(maxAddress)).append("\n");
    sb.append("    subnetId: ").append(toIndentedString(subnetId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

