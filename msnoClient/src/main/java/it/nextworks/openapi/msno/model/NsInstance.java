/*
 * SOL005 - NS Lifecycle Management Interface
 * SOL005 - NS Lifecycle Management Interface IMPORTANT: Please note that this file might be not aligned to the current version of the ETSI Group Specification it refers to and has not been approved by the ETSI NFV ISG. In case of discrepancies the published ETSI Group Specification takes precedence. Please report bugs to https://forge.etsi.org/bugzilla/buglist.cgi?component=Nfv-Openapis 
 *
 * OpenAPI spec version: 1.1.0-impl:etsi.org:ETSI_NFV_OpenAPI:1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package it.nextworks.openapi.msno.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import it.nextworks.openapi.msno.model.AffinityOrAntiAffinityRule;
import it.nextworks.openapi.msno.model.NsInstanceLinks;
import it.nextworks.openapi.msno.model.NsMonitoringParameter;
import it.nextworks.openapi.msno.model.NsScaleInfo;
import it.nextworks.openapi.msno.model.NsVirtualLinkInfo;
import it.nextworks.openapi.msno.model.PnfInfo;
import it.nextworks.openapi.msno.model.SapInfo;
import it.nextworks.openapi.msno.model.VnfInstance;
import it.nextworks.openapi.msno.model.VnffgInfo;

import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

/**
 * This type represents a response for Query NS operation. It shall comply with the provisions defined in Table 6.5.2.10-1. 
 */
@ApiModel(description = "This type represents a response for Query NS operation. It shall comply with the provisions defined in Table 6.5.2.10-1. ")
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2019-11-08T16:52:33.422+01:00")
public class NsInstance {
  @SerializedName("id")
  private String id = null;

  @SerializedName("nsInstanceName")
  private String nsInstanceName = null;

  @SerializedName("nsInstanceDescription")
  private String nsInstanceDescription = null;

  @SerializedName("nsdId")
  private String nsdId = null;

  @SerializedName("nsdInfoId")
  private String nsdInfoId = null;

  @SerializedName("flavourId")
  private String flavourId = null;

  @SerializedName("vnfInstance")
  private List<VnfInstance> vnfInstance = null;

  @SerializedName("pnfInfo")
  private List<PnfInfo> pnfInfo = null;

  @SerializedName("virtualLinkInfo")
  private List<NsVirtualLinkInfo> virtualLinkInfo = null;

  @SerializedName("vnffgInfo")
  private List<VnffgInfo> vnffgInfo = null;

  @SerializedName("sapInfo")
  private List<SapInfo> sapInfo = null;

  @SerializedName("nestedNsInstanceId")
  private List<String> nestedNsInstanceId = null;

  /**
   * The state of the NS instance. Permitted values: NOT_INSTANTIATED: The NS instance is terminated or not instantiated. INSTANTIATED: The NS instance is instantiated. 
   */
  @JsonAdapter(NsStateEnum.Adapter.class)
  public enum NsStateEnum {
    NOT_INSTANTIATED("NOT_INSTANTIATED"),
    
    INSTANTIATED("INSTANTIATED");

    private String value;

    NsStateEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static NsStateEnum fromValue(String text) {
      for (NsStateEnum b : NsStateEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<NsStateEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final NsStateEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public NsStateEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return NsStateEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("nsState")
  private NsStateEnum nsState = null;

  @SerializedName("monitoringParameter")
  private List<NsMonitoringParameter> monitoringParameter = null;

  @SerializedName("nsScaleStatus")
  private List<NsScaleInfo> nsScaleStatus = null;

  @SerializedName("additionalAffinityOrAntiAffinityRule")
  private List<AffinityOrAntiAffinityRule> additionalAffinityOrAntiAffinityRule = null;

  @SerializedName("_links")
  private NsInstanceLinks links = null;

  public NsInstance id(String id) {
    this.id = id;
    return this;
  }

   /**
   * Identifier of the NS instance. 
   * @return id
  **/
  @ApiModelProperty(required = true, value = "Identifier of the NS instance. ")
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }

  public NsInstance nsInstanceName(String nsInstanceName) {
    this.nsInstanceName = nsInstanceName;
    return this;
  }

   /**
   * Human readable name of the NS instance. 
   * @return nsInstanceName
  **/
  @ApiModelProperty(required = true, value = "Human readable name of the NS instance. ")
  public String getNsInstanceName() {
    return nsInstanceName;
  }

  public void setNsInstanceName(String nsInstanceName) {
    this.nsInstanceName = nsInstanceName;
  }

  public NsInstance nsInstanceDescription(String nsInstanceDescription) {
    this.nsInstanceDescription = nsInstanceDescription;
    return this;
  }

   /**
   * Human readable description of the NS instance. 
   * @return nsInstanceDescription
  **/
  @ApiModelProperty(required = true, value = "Human readable description of the NS instance. ")
  public String getNsInstanceDescription() {
    return nsInstanceDescription;
  }

  public void setNsInstanceDescription(String nsInstanceDescription) {
    this.nsInstanceDescription = nsInstanceDescription;
  }

  public NsInstance nsdId(String nsdId) {
    this.nsdId = nsdId;
    return this;
  }

   /**
   * Identifier of the NSD on which the NS instance is based. 
   * @return nsdId
  **/
  @ApiModelProperty(required = true, value = "Identifier of the NSD on which the NS instance is based. ")
  public String getNsdId() {
    return nsdId;
  }

  public void setNsdId(String nsdId) {
    this.nsdId = nsdId;
  }

  public NsInstance nsdInfoId(String nsdInfoId) {
    this.nsdInfoId = nsdInfoId;
    return this;
  }

   /**
   * Identifier of the NSD information object on which the NS instance is based. This identifier was allocated by the NFVO. 
   * @return nsdInfoId
  **/
  @ApiModelProperty(required = true, value = "Identifier of the NSD information object on which the NS instance is based. This identifier was allocated by the NFVO. ")
  public String getNsdInfoId() {
    return nsdInfoId;
  }

  public void setNsdInfoId(String nsdInfoId) {
    this.nsdInfoId = nsdInfoId;
  }

  public NsInstance flavourId(String flavourId) {
    this.flavourId = flavourId;
    return this;
  }

   /**
   * Identifier of the NS deployment flavor applied to the NS instance. This attribute shall be present if the nsState attribute value is INSTANTIATED. 
   * @return flavourId
  **/
  @ApiModelProperty(value = "Identifier of the NS deployment flavor applied to the NS instance. This attribute shall be present if the nsState attribute value is INSTANTIATED. ")
  public String getFlavourId() {
    return flavourId;
  }

  public void setFlavourId(String flavourId) {
    this.flavourId = flavourId;
  }

  public NsInstance vnfInstance(List<VnfInstance> vnfInstance) {
    this.vnfInstance = vnfInstance;
    return this;
  }

  public NsInstance addVnfInstanceItem(VnfInstance vnfInstanceItem) {
    if (this.vnfInstance == null) {
      this.vnfInstance = new ArrayList<VnfInstance>();
    }
    this.vnfInstance.add(vnfInstanceItem);
    return this;
  }

   /**
   * Information on constituent VNF(s) of the NS instance. 
   * @return vnfInstance
  **/
  @ApiModelProperty(value = "Information on constituent VNF(s) of the NS instance. ")
  public List<VnfInstance> getVnfInstance() {
    return vnfInstance;
  }

  public void setVnfInstance(List<VnfInstance> vnfInstance) {
    this.vnfInstance = vnfInstance;
  }

  public NsInstance pnfInfo(List<PnfInfo> pnfInfo) {
    this.pnfInfo = pnfInfo;
    return this;
  }

  public NsInstance addPnfInfoItem(PnfInfo pnfInfoItem) {
    if (this.pnfInfo == null) {
      this.pnfInfo = new ArrayList<PnfInfo>();
    }
    this.pnfInfo.add(pnfInfoItem);
    return this;
  }

   /**
   * Information on the PNF(s) that are part of the NS instance. 
   * @return pnfInfo
  **/
  @ApiModelProperty(value = "Information on the PNF(s) that are part of the NS instance. ")
  public List<PnfInfo> getPnfInfo() {
    return pnfInfo;
  }

  public void setPnfInfo(List<PnfInfo> pnfInfo) {
    this.pnfInfo = pnfInfo;
  }

  public NsInstance virtualLinkInfo(List<NsVirtualLinkInfo> virtualLinkInfo) {
    this.virtualLinkInfo = virtualLinkInfo;
    return this;
  }

  public NsInstance addVirtualLinkInfoItem(NsVirtualLinkInfo virtualLinkInfoItem) {
    if (this.virtualLinkInfo == null) {
      this.virtualLinkInfo = new ArrayList<NsVirtualLinkInfo>();
    }
    this.virtualLinkInfo.add(virtualLinkInfoItem);
    return this;
  }

   /**
   * Information on the VL(s) of the NS instance. This attribute shall be present if the nsState attribute value is INSTANTIATED and if the NS instance has specified connectivity. 
   * @return virtualLinkInfo
  **/
  @ApiModelProperty(value = "Information on the VL(s) of the NS instance. This attribute shall be present if the nsState attribute value is INSTANTIATED and if the NS instance has specified connectivity. ")
  public List<NsVirtualLinkInfo> getVirtualLinkInfo() {
    return virtualLinkInfo;
  }

  public void setVirtualLinkInfo(List<NsVirtualLinkInfo> virtualLinkInfo) {
    this.virtualLinkInfo = virtualLinkInfo;
  }

  public NsInstance vnffgInfo(List<VnffgInfo> vnffgInfo) {
    this.vnffgInfo = vnffgInfo;
    return this;
  }

  public NsInstance addVnffgInfoItem(VnffgInfo vnffgInfoItem) {
    if (this.vnffgInfo == null) {
      this.vnffgInfo = new ArrayList<VnffgInfo>();
    }
    this.vnffgInfo.add(vnffgInfoItem);
    return this;
  }

   /**
   * Information on the VNFFG(s) of the NS instance. 
   * @return vnffgInfo
  **/
  @ApiModelProperty(value = "Information on the VNFFG(s) of the NS instance. ")
  public List<VnffgInfo> getVnffgInfo() {
    return vnffgInfo;
  }

  public void setVnffgInfo(List<VnffgInfo> vnffgInfo) {
    this.vnffgInfo = vnffgInfo;
  }

  public NsInstance sapInfo(List<SapInfo> sapInfo) {
    this.sapInfo = sapInfo;
    return this;
  }

  public NsInstance addSapInfoItem(SapInfo sapInfoItem) {
    if (this.sapInfo == null) {
      this.sapInfo = new ArrayList<SapInfo>();
    }
    this.sapInfo.add(sapInfoItem);
    return this;
  }

   /**
   * Information on the SAP(s) of the NS instance. 
   * @return sapInfo
  **/
  @ApiModelProperty(value = "Information on the SAP(s) of the NS instance. ")
  public List<SapInfo> getSapInfo() {
    return sapInfo;
  }

  public void setSapInfo(List<SapInfo> sapInfo) {
    this.sapInfo = sapInfo;
  }

  public NsInstance nestedNsInstanceId(List<String> nestedNsInstanceId) {
    this.nestedNsInstanceId = nestedNsInstanceId;
    return this;
  }

  public NsInstance addNestedNsInstanceIdItem(String nestedNsInstanceIdItem) {
    if (this.nestedNsInstanceId == null) {
      this.nestedNsInstanceId = new ArrayList<String>();
    }
    this.nestedNsInstanceId.add(nestedNsInstanceIdItem);
    return this;
  }

   /**
   * Identifier of the nested NS(s) of the NS instance. 
   * @return nestedNsInstanceId
  **/
  @ApiModelProperty(value = "Identifier of the nested NS(s) of the NS instance. ")
  public List<String> getNestedNsInstanceId() {
    return nestedNsInstanceId;
  }

  public void setNestedNsInstanceId(List<String> nestedNsInstanceId) {
    this.nestedNsInstanceId = nestedNsInstanceId;
  }

  public NsInstance nsState(NsStateEnum nsState) {
    this.nsState = nsState;
    return this;
  }

   /**
   * The state of the NS instance. Permitted values: NOT_INSTANTIATED: The NS instance is terminated or not instantiated. INSTANTIATED: The NS instance is instantiated. 
   * @return nsState
  **/
  @ApiModelProperty(required = true, value = "The state of the NS instance. Permitted values: NOT_INSTANTIATED: The NS instance is terminated or not instantiated. INSTANTIATED: The NS instance is instantiated. ")
  public NsStateEnum getNsState() {
    return nsState;
  }

  public void setNsState(NsStateEnum nsState) {
    this.nsState = nsState;
  }

  public NsInstance monitoringParameter(List<NsMonitoringParameter> monitoringParameter) {
    this.monitoringParameter = monitoringParameter;
    return this;
  }

  public NsInstance addMonitoringParameterItem(NsMonitoringParameter monitoringParameterItem) {
    if (this.monitoringParameter == null) {
      this.monitoringParameter = new ArrayList<NsMonitoringParameter>();
    }
    this.monitoringParameter.add(monitoringParameterItem);
    return this;
  }

   /**
   * Performance metrics tracked by the NFVO (e.g. for auto-scaling purposes) as identified by the NS designer in the NSD. 
   * @return monitoringParameter
  **/
  @ApiModelProperty(value = "Performance metrics tracked by the NFVO (e.g. for auto-scaling purposes) as identified by the NS designer in the NSD. ")
  public List<NsMonitoringParameter> getMonitoringParameter() {
    return monitoringParameter;
  }

  public void setMonitoringParameter(List<NsMonitoringParameter> monitoringParameter) {
    this.monitoringParameter = monitoringParameter;
  }

  public NsInstance nsScaleStatus(List<NsScaleInfo> nsScaleStatus) {
    this.nsScaleStatus = nsScaleStatus;
    return this;
  }

  public NsInstance addNsScaleStatusItem(NsScaleInfo nsScaleStatusItem) {
    if (this.nsScaleStatus == null) {
      this.nsScaleStatus = new ArrayList<NsScaleInfo>();
    }
    this.nsScaleStatus.add(nsScaleStatusItem);
    return this;
  }

   /**
   * Status of each NS scaling aspect declared in the applicable DF, how \&quot;big\&quot; the NS instance has been scaled w.r.t. that aspect. This attribute shall be present if the nsState attribute value is INSTANTIATED. 
   * @return nsScaleStatus
  **/
  @ApiModelProperty(value = "Status of each NS scaling aspect declared in the applicable DF, how \"big\" the NS instance has been scaled w.r.t. that aspect. This attribute shall be present if the nsState attribute value is INSTANTIATED. ")
  public List<NsScaleInfo> getNsScaleStatus() {
    return nsScaleStatus;
  }

  public void setNsScaleStatus(List<NsScaleInfo> nsScaleStatus) {
    this.nsScaleStatus = nsScaleStatus;
  }

  public NsInstance additionalAffinityOrAntiAffinityRule(List<AffinityOrAntiAffinityRule> additionalAffinityOrAntiAffinityRule) {
    this.additionalAffinityOrAntiAffinityRule = additionalAffinityOrAntiAffinityRule;
    return this;
  }

  public NsInstance addAdditionalAffinityOrAntiAffinityRuleItem(AffinityOrAntiAffinityRule additionalAffinityOrAntiAffinityRuleItem) {
    if (this.additionalAffinityOrAntiAffinityRule == null) {
      this.additionalAffinityOrAntiAffinityRule = new ArrayList<AffinityOrAntiAffinityRule>();
    }
    this.additionalAffinityOrAntiAffinityRule.add(additionalAffinityOrAntiAffinityRuleItem);
    return this;
  }

   /**
   * Information on the additional affinity or anti-affinity rule from NS instantiation operation. Shall not conflict with rules already specified in the NSD. 
   * @return additionalAffinityOrAntiAffinityRule
  **/
  @ApiModelProperty(value = "Information on the additional affinity or anti-affinity rule from NS instantiation operation. Shall not conflict with rules already specified in the NSD. ")
  public List<AffinityOrAntiAffinityRule> getAdditionalAffinityOrAntiAffinityRule() {
    return additionalAffinityOrAntiAffinityRule;
  }

  public void setAdditionalAffinityOrAntiAffinityRule(List<AffinityOrAntiAffinityRule> additionalAffinityOrAntiAffinityRule) {
    this.additionalAffinityOrAntiAffinityRule = additionalAffinityOrAntiAffinityRule;
  }

  public NsInstance links(NsInstanceLinks links) {
    this.links = links;
    return this;
  }

   /**
   * Get links
   * @return links
  **/
  @ApiModelProperty(value = "")
  public NsInstanceLinks getLinks() {
    return links;
  }

  public void setLinks(NsInstanceLinks links) {
    this.links = links;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    NsInstance nsInstance = (NsInstance) o;
    return Objects.equals(this.id, nsInstance.id) &&
        Objects.equals(this.nsInstanceName, nsInstance.nsInstanceName) &&
        Objects.equals(this.nsInstanceDescription, nsInstance.nsInstanceDescription) &&
        Objects.equals(this.nsdId, nsInstance.nsdId) &&
        Objects.equals(this.nsdInfoId, nsInstance.nsdInfoId) &&
        Objects.equals(this.flavourId, nsInstance.flavourId) &&
        Objects.equals(this.vnfInstance, nsInstance.vnfInstance) &&
        Objects.equals(this.pnfInfo, nsInstance.pnfInfo) &&
        Objects.equals(this.virtualLinkInfo, nsInstance.virtualLinkInfo) &&
        Objects.equals(this.vnffgInfo, nsInstance.vnffgInfo) &&
        Objects.equals(this.sapInfo, nsInstance.sapInfo) &&
        Objects.equals(this.nestedNsInstanceId, nsInstance.nestedNsInstanceId) &&
        Objects.equals(this.nsState, nsInstance.nsState) &&
        Objects.equals(this.monitoringParameter, nsInstance.monitoringParameter) &&
        Objects.equals(this.nsScaleStatus, nsInstance.nsScaleStatus) &&
        Objects.equals(this.additionalAffinityOrAntiAffinityRule, nsInstance.additionalAffinityOrAntiAffinityRule) &&
        Objects.equals(this.links, nsInstance.links);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, nsInstanceName, nsInstanceDescription, nsdId, nsdInfoId, flavourId, vnfInstance, pnfInfo, virtualLinkInfo, vnffgInfo, sapInfo, nestedNsInstanceId, nsState, monitoringParameter, nsScaleStatus, additionalAffinityOrAntiAffinityRule, links);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class NsInstance {\n");
    
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    nsInstanceName: ").append(toIndentedString(nsInstanceName)).append("\n");
    sb.append("    nsInstanceDescription: ").append(toIndentedString(nsInstanceDescription)).append("\n");
    sb.append("    nsdId: ").append(toIndentedString(nsdId)).append("\n");
    sb.append("    nsdInfoId: ").append(toIndentedString(nsdInfoId)).append("\n");
    sb.append("    flavourId: ").append(toIndentedString(flavourId)).append("\n");
    sb.append("    vnfInstance: ").append(toIndentedString(vnfInstance)).append("\n");
    sb.append("    pnfInfo: ").append(toIndentedString(pnfInfo)).append("\n");
    sb.append("    virtualLinkInfo: ").append(toIndentedString(virtualLinkInfo)).append("\n");
    sb.append("    vnffgInfo: ").append(toIndentedString(vnffgInfo)).append("\n");
    sb.append("    sapInfo: ").append(toIndentedString(sapInfo)).append("\n");
    sb.append("    nestedNsInstanceId: ").append(toIndentedString(nestedNsInstanceId)).append("\n");
    sb.append("    nsState: ").append(toIndentedString(nsState)).append("\n");
    sb.append("    monitoringParameter: ").append(toIndentedString(monitoringParameter)).append("\n");
    sb.append("    nsScaleStatus: ").append(toIndentedString(nsScaleStatus)).append("\n");
    sb.append("    additionalAffinityOrAntiAffinityRule: ").append(toIndentedString(additionalAffinityOrAntiAffinityRule)).append("\n");
    sb.append("    links: ").append(toIndentedString(links)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

