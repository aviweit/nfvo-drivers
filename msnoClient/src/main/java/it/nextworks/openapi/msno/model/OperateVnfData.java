/*
 * SOL005 - NS Lifecycle Management Interface
 * SOL005 - NS Lifecycle Management Interface IMPORTANT: Please note that this file might be not aligned to the current version of the ETSI Group Specification it refers to and has not been approved by the ETSI NFV ISG. In case of discrepancies the published ETSI Group Specification takes precedence. Please report bugs to https://forge.etsi.org/bugzilla/buglist.cgi?component=Nfv-Openapis 
 *
 * OpenAPI spec version: 1.1.0-impl:etsi.org:ETSI_NFV_OpenAPI:1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package it.nextworks.openapi.msno.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import it.nextworks.openapi.msno.model.OperationalStates;
import it.nextworks.openapi.msno.model.StopType;

import java.io.IOException;

/**
 * This type represents a VNF instance for which the operational state needs to be changed and the requested new state. It shall comply with the provisions defined in Table 6.5.3.31-1. 
 */
@ApiModel(description = "This type represents a VNF instance for which the operational state needs to be changed and the requested new state. It shall comply with the provisions defined in Table 6.5.3.31-1. ")
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2019-11-08T16:52:33.422+01:00")
public class OperateVnfData {
  @SerializedName("vnfInstanceId")
  private String vnfInstanceId = null;

  @SerializedName("changeStateTo")
  private OperationalStates changeStateTo = null;

  @SerializedName("stopType")
  private StopType stopType = null;

  @SerializedName("gracefulStopTimeout")
  private Integer gracefulStopTimeout = null;

  public OperateVnfData vnfInstanceId(String vnfInstanceId) {
    this.vnfInstanceId = vnfInstanceId;
    return this;
  }

   /**
   * Identifier of the VNF instance. 
   * @return vnfInstanceId
  **/
  @ApiModelProperty(required = true, value = "Identifier of the VNF instance. ")
  public String getVnfInstanceId() {
    return vnfInstanceId;
  }

  public void setVnfInstanceId(String vnfInstanceId) {
    this.vnfInstanceId = vnfInstanceId;
  }

  public OperateVnfData changeStateTo(OperationalStates changeStateTo) {
    this.changeStateTo = changeStateTo;
    return this;
  }

   /**
   * The desired operational state (i.e. started or stopped) to change the VNF to. 
   * @return changeStateTo
  **/
  @ApiModelProperty(required = true, value = "The desired operational state (i.e. started or stopped) to change the VNF to. ")
  public OperationalStates getChangeStateTo() {
    return changeStateTo;
  }

  public void setChangeStateTo(OperationalStates changeStateTo) {
    this.changeStateTo = changeStateTo;
  }

  public OperateVnfData stopType(StopType stopType) {
    this.stopType = stopType;
    return this;
  }

   /**
   * It signals whether forceful or graceful stop is requested. 
   * @return stopType
  **/
  @ApiModelProperty(value = "It signals whether forceful or graceful stop is requested. ")
  public StopType getStopType() {
    return stopType;
  }

  public void setStopType(StopType stopType) {
    this.stopType = stopType;
  }

  public OperateVnfData gracefulStopTimeout(Integer gracefulStopTimeout) {
    this.gracefulStopTimeout = gracefulStopTimeout;
    return this;
  }

   /**
   * The time interval (in seconds) to wait for the VNF to be taken out of service during graceful stop, before stopping the VNF. 
   * @return gracefulStopTimeout
  **/
  @ApiModelProperty(value = "The time interval (in seconds) to wait for the VNF to be taken out of service during graceful stop, before stopping the VNF. ")
  public Integer getGracefulStopTimeout() {
    return gracefulStopTimeout;
  }

  public void setGracefulStopTimeout(Integer gracefulStopTimeout) {
    this.gracefulStopTimeout = gracefulStopTimeout;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    OperateVnfData operateVnfData = (OperateVnfData) o;
    return Objects.equals(this.vnfInstanceId, operateVnfData.vnfInstanceId) &&
        Objects.equals(this.changeStateTo, operateVnfData.changeStateTo) &&
        Objects.equals(this.stopType, operateVnfData.stopType) &&
        Objects.equals(this.gracefulStopTimeout, operateVnfData.gracefulStopTimeout);
  }

  @Override
  public int hashCode() {
    return Objects.hash(vnfInstanceId, changeStateTo, stopType, gracefulStopTimeout);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class OperateVnfData {\n");
    
    sb.append("    vnfInstanceId: ").append(toIndentedString(vnfInstanceId)).append("\n");
    sb.append("    changeStateTo: ").append(toIndentedString(changeStateTo)).append("\n");
    sb.append("    stopType: ").append(toIndentedString(stopType)).append("\n");
    sb.append("    gracefulStopTimeout: ").append(toIndentedString(gracefulStopTimeout)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

