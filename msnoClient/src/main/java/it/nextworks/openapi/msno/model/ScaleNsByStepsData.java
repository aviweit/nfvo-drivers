/*
 * SOL005 - NS Lifecycle Management Interface
 * SOL005 - NS Lifecycle Management Interface IMPORTANT: Please note that this file might be not aligned to the current version of the ETSI Group Specification it refers to and has not been approved by the ETSI NFV ISG. In case of discrepancies the published ETSI Group Specification takes precedence. Please report bugs to https://forge.etsi.org/bugzilla/buglist.cgi?component=Nfv-Openapis 
 *
 * OpenAPI spec version: 1.1.0-impl:etsi.org:ETSI_NFV_OpenAPI:1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package it.nextworks.openapi.msno.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

/**
 * This type represents the information used to scale an NS instance by one or more scaling steps, with respect to a particular NS scaling aspect. Performing a scaling step means increasing/decreasing the capacity of an NS instance in a discrete manner, i.e. moving from one NS scale level to another. The NS scaling aspects and their corresponding NS scale levels applicable to the NS instance are declared in the NSD. 
 */
@ApiModel(description = "This type represents the information used to scale an NS instance by one or more scaling steps, with respect to a particular NS scaling aspect. Performing a scaling step means increasing/decreasing the capacity of an NS instance in a discrete manner, i.e. moving from one NS scale level to another. The NS scaling aspects and their corresponding NS scale levels applicable to the NS instance are declared in the NSD. ")
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2019-11-08T16:52:33.422+01:00")
public class ScaleNsByStepsData {
  /**
   * The scaling direction. Possible values are: - SCALE_IN - SCALE_OUT. 
   */
  @JsonAdapter(ScalingDirectionEnum.Adapter.class)
  public enum ScalingDirectionEnum {
    IN("SCALE_IN"),
    
    OUT("SCALE_OUT");

    private String value;

    ScalingDirectionEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ScalingDirectionEnum fromValue(String text) {
      for (ScalingDirectionEnum b : ScalingDirectionEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<ScalingDirectionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ScalingDirectionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ScalingDirectionEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return ScalingDirectionEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("scalingDirection")
  private ScalingDirectionEnum scalingDirection = null;

  @SerializedName("aspectId")
  private String aspectId = null;

  @SerializedName("numberOfSteps")
  private Integer numberOfSteps = null;

  public ScaleNsByStepsData scalingDirection(ScalingDirectionEnum scalingDirection) {
    this.scalingDirection = scalingDirection;
    return this;
  }

   /**
   * The scaling direction. Possible values are: - SCALE_IN - SCALE_OUT. 
   * @return scalingDirection
  **/
  @ApiModelProperty(required = true, value = "The scaling direction. Possible values are: - SCALE_IN - SCALE_OUT. ")
  public ScalingDirectionEnum getScalingDirection() {
    return scalingDirection;
  }

  public void setScalingDirection(ScalingDirectionEnum scalingDirection) {
    this.scalingDirection = scalingDirection;
  }

  public ScaleNsByStepsData aspectId(String aspectId) {
    this.aspectId = aspectId;
    return this;
  }

   /**
   * The aspect of the NS that is requested to be scaled, as declared in the NSD. 
   * @return aspectId
  **/
  @ApiModelProperty(required = true, value = "The aspect of the NS that is requested to be scaled, as declared in the NSD. ")
  public String getAspectId() {
    return aspectId;
  }

  public void setAspectId(String aspectId) {
    this.aspectId = aspectId;
  }

  public ScaleNsByStepsData numberOfSteps(Integer numberOfSteps) {
    this.numberOfSteps = numberOfSteps;
    return this;
  }

   /**
   * The number of scaling steps to be performed. Defaults to 1. 
   * @return numberOfSteps
  **/
  @ApiModelProperty(value = "The number of scaling steps to be performed. Defaults to 1. ")
  public Integer getNumberOfSteps() {
    return numberOfSteps;
  }

  public void setNumberOfSteps(Integer numberOfSteps) {
    this.numberOfSteps = numberOfSteps;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ScaleNsByStepsData scaleNsByStepsData = (ScaleNsByStepsData) o;
    return Objects.equals(this.scalingDirection, scaleNsByStepsData.scalingDirection) &&
        Objects.equals(this.aspectId, scaleNsByStepsData.aspectId) &&
        Objects.equals(this.numberOfSteps, scaleNsByStepsData.numberOfSteps);
  }

  @Override
  public int hashCode() {
    return Objects.hash(scalingDirection, aspectId, numberOfSteps);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ScaleNsByStepsData {\n");
    
    sb.append("    scalingDirection: ").append(toIndentedString(scalingDirection)).append("\n");
    sb.append("    aspectId: ").append(toIndentedString(aspectId)).append("\n");
    sb.append("    numberOfSteps: ").append(toIndentedString(numberOfSteps)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

