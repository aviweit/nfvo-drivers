/*
 * SOL005 - NS Lifecycle Management Interface
 * SOL005 - NS Lifecycle Management Interface IMPORTANT: Please note that this file might be not aligned to the current version of the ETSI Group Specification it refers to and has not been approved by the ETSI NFV ISG. In case of discrepancies the published ETSI Group Specification takes precedence. Please report bugs to https://forge.etsi.org/bugzilla/buglist.cgi?component=Nfv-Openapis 
 *
 * OpenAPI spec version: 1.1.0-impl:etsi.org:ETSI_NFV_OpenAPI:1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package it.nextworks.openapi.msno.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import it.nextworks.openapi.msno.model.KeyValuePairs;
import it.nextworks.openapi.msno.model.VnfScaleInfo;

import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

/**
 * This type describes the information used to scale a VNF instance to a target size. The target size is either expressed as an instantiation level of that DF as defined in the VNFD, or given as a list of scale levels, one per scaling aspect of that DF. Instantiation levels and scaling aspects are declared in the VNFD. The NFVO shall then invoke the ScaleVnfToLevel operation towards the appropriate VNFM.. 
 */
@ApiModel(description = "This type describes the information used to scale a VNF instance to a target size. The target size is either expressed as an instantiation level of that DF as defined in the VNFD, or given as a list of scale levels, one per scaling aspect of that DF. Instantiation levels and scaling aspects are declared in the VNFD. The NFVO shall then invoke the ScaleVnfToLevel operation towards the appropriate VNFM.. ")
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2019-11-08T16:52:33.422+01:00")
public class ScaleToLevelData {
  @SerializedName("vnfInstantiationLevelId")
  private String vnfInstantiationLevelId = null;

  @SerializedName("vnfScaleInfo")
  private List<VnfScaleInfo> vnfScaleInfo = null;

  @SerializedName("additionalParams")
  private KeyValuePairs additionalParams = null;

  public ScaleToLevelData vnfInstantiationLevelId(String vnfInstantiationLevelId) {
    this.vnfInstantiationLevelId = vnfInstantiationLevelId;
    return this;
  }

   /**
   * Identifier of the target instantiation level of the current deployment flavor to which the VNF is requested to be scaled. 
   * @return vnfInstantiationLevelId
  **/
  @ApiModelProperty(value = "Identifier of the target instantiation level of the current deployment flavor to which the VNF is requested to be scaled. ")
  public String getVnfInstantiationLevelId() {
    return vnfInstantiationLevelId;
  }

  public void setVnfInstantiationLevelId(String vnfInstantiationLevelId) {
    this.vnfInstantiationLevelId = vnfInstantiationLevelId;
  }

  public ScaleToLevelData vnfScaleInfo(List<VnfScaleInfo> vnfScaleInfo) {
    this.vnfScaleInfo = vnfScaleInfo;
    return this;
  }

  public ScaleToLevelData addVnfScaleInfoItem(VnfScaleInfo vnfScaleInfoItem) {
    if (this.vnfScaleInfo == null) {
      this.vnfScaleInfo = new ArrayList<VnfScaleInfo>();
    }
    this.vnfScaleInfo.add(vnfScaleInfoItem);
    return this;
  }

   /**
   * For each scaling aspect of the current deployment flavor, indicates the target scale level to which the VNF is to be scaled. 
   * @return vnfScaleInfo
  **/
  @ApiModelProperty(value = "For each scaling aspect of the current deployment flavor, indicates the target scale level to which the VNF is to be scaled. ")
  public List<VnfScaleInfo> getVnfScaleInfo() {
    return vnfScaleInfo;
  }

  public void setVnfScaleInfo(List<VnfScaleInfo> vnfScaleInfo) {
    this.vnfScaleInfo = vnfScaleInfo;
  }

  public ScaleToLevelData additionalParams(KeyValuePairs additionalParams) {
    this.additionalParams = additionalParams;
    return this;
  }

   /**
   * Additional parameters passed by the NFVO as input to the scaling process, specific to the VNF being scaled. 
   * @return additionalParams
  **/
  @ApiModelProperty(value = "Additional parameters passed by the NFVO as input to the scaling process, specific to the VNF being scaled. ")
  public KeyValuePairs getAdditionalParams() {
    return additionalParams;
  }

  public void setAdditionalParams(KeyValuePairs additionalParams) {
    this.additionalParams = additionalParams;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ScaleToLevelData scaleToLevelData = (ScaleToLevelData) o;
    return Objects.equals(this.vnfInstantiationLevelId, scaleToLevelData.vnfInstantiationLevelId) &&
        Objects.equals(this.vnfScaleInfo, scaleToLevelData.vnfScaleInfo) &&
        Objects.equals(this.additionalParams, scaleToLevelData.additionalParams);
  }

  @Override
  public int hashCode() {
    return Objects.hash(vnfInstantiationLevelId, vnfScaleInfo, additionalParams);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ScaleToLevelData {\n");
    
    sb.append("    vnfInstantiationLevelId: ").append(toIndentedString(vnfInstantiationLevelId)).append("\n");
    sb.append("    vnfScaleInfo: ").append(toIndentedString(vnfScaleInfo)).append("\n");
    sb.append("    additionalParams: ").append(toIndentedString(additionalParams)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

