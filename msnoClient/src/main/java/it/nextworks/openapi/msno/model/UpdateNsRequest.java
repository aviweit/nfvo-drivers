/*
 * SOL005 - NS Lifecycle Management Interface
 * SOL005 - NS Lifecycle Management Interface IMPORTANT: Please note that this file might be not aligned to the current version of the ETSI Group Specification it refers to and has not been approved by the ETSI NFV ISG. In case of discrepancies the published ETSI Group Specification takes precedence. Please report bugs to https://forge.etsi.org/bugzilla/buglist.cgi?component=Nfv-Openapis 
 *
 * OpenAPI spec version: 1.1.0-impl:etsi.org:ETSI_NFV_OpenAPI:1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package it.nextworks.openapi.msno.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import it.nextworks.openapi.msno.model.AddPnfData;
import it.nextworks.openapi.msno.model.AddVnffgData;
import it.nextworks.openapi.msno.model.AssocNewNsdVersionData;
import it.nextworks.openapi.msno.model.ChangeExtVnfConnectivityData;
import it.nextworks.openapi.msno.model.ChangeNsFlavourData;
import it.nextworks.openapi.msno.model.ChangeVnfFlavourData;
import it.nextworks.openapi.msno.model.InstantiateVnfData;
import it.nextworks.openapi.msno.model.ModifyPnfData;
import it.nextworks.openapi.msno.model.ModifyVnfInfoData;
import it.nextworks.openapi.msno.model.MoveVnfInstanceData;
import it.nextworks.openapi.msno.model.NestedNsInstanceData;
import it.nextworks.openapi.msno.model.OperateVnfData;
import it.nextworks.openapi.msno.model.SapData;
import it.nextworks.openapi.msno.model.UpdateVnffgData;
import it.nextworks.openapi.msno.model.VnfInstanceData;

import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

/**
 * This operation supports the update of a NS instance, It shall comply with the provisions defined in Table 6.5.2.12-1. 
 */
@ApiModel(description = "This operation supports the update of a NS instance, It shall comply with the provisions defined in Table 6.5.2.12-1. ")
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2019-11-08T16:52:33.422+01:00")
public class UpdateNsRequest {
  /**
   * The type of update. It determines also which one of the following parameters is present in the operation. Possible values include: * ADD_VNF: Adding existing VNF instance(s) * REMOVE_VNF: Removing VNF instance(s) * INSTANTIATE_VNF: Instantiating new VNF(s) * CHANGE_VNF_DF: Changing VNF DF * OPERATE_VNF: Changing VNF state, * MODIFY_VNF_INFORMATION: Modifying VNF information and/or the configurable properties of VNF instance(s) * CHANGE_EXTERNAL_VNF_CONNECTIVITY: Changing the external connectivity of VNF instance(s)ADD_SAP: Adding SAP(s) * REMOVE_SAP: Removing SAP(s) * ADD_NESTED_NS: Adding existing NS instance(s) as nested NS(s) * REMOVE_NESTED_NS: Removing existing nested NS instance(s) * ASSOC_NEW_NSD_VERSION: Associating a new NSD version to the NS instance * MOVE_VNF: Moving VNF instance(s) from one origin NS instance to another target NS instance * ADD_VNFFG: Adding VNFFG(s) * REMOVE_VNFFG: Removing VNFFG(s) * UPDATE_VNFFG: Updating VNFFG(s) * CHANGE_NS_DF: Changing NS DF * ADD_PNF: Adding PNF * MODIFY_PNF: Modifying PNF * REMOVE_PNF: Removing PNF 
   */
  @JsonAdapter(UpdateTypeEnum.Adapter.class)
  public enum UpdateTypeEnum {
    ADD_VNF("ADD_VNF"),
    
    REMOVE_VNF("REMOVE_VNF"),
    
    INSTANTIATE_VNF("INSTANTIATE_VNF"),
    
    CHANGE_VNF_DF("CHANGE_VNF_DF"),
    
    OPERATE_VNF("OPERATE_VNF"),
    
    MODIFY_VNF_INFORMATION("MODIFY_VNF_INFORMATION"),
    
    CHANGE_EXTERNAL_VNF_CONNECTIVITY("CHANGE_EXTERNAL_VNF_CONNECTIVITY"),
    
    REMOVE_SAP("REMOVE_SAP"),
    
    ADD_NESTED_NS("ADD_NESTED_NS"),
    
    REMOVE_NESTED_NS("REMOVE_NESTED_NS"),
    
    ASSOC_NEW_NSD_VERSION("ASSOC_NEW_NSD_VERSION"),
    
    MOVE_VNF("MOVE_VNF"),
    
    ADD_VNFFG("ADD_VNFFG"),
    
    REMOVE_VNFFG("REMOVE_VNFFG"),
    
    UPDATE_VNFFG("UPDATE_VNFFG"),
    
    CHANGE_NS_DF("CHANGE_NS_DF"),
    
    ADD_PNF("ADD_PNF"),
    
    MODIFY_PNF("MODIFY_PNF"),
    
    REMOVE_PNF("REMOVE_PNF");

    private String value;

    UpdateTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static UpdateTypeEnum fromValue(String text) {
      for (UpdateTypeEnum b : UpdateTypeEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<UpdateTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final UpdateTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public UpdateTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return UpdateTypeEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("updateType")
  private UpdateTypeEnum updateType = null;

  @SerializedName("addVnfIstance")
  private List<VnfInstanceData> addVnfIstance = null;

  @SerializedName("removeVnfInstanceId")
  private List<String> removeVnfInstanceId = null;

  @SerializedName("instantiateVnfData")
  private List<InstantiateVnfData> instantiateVnfData = null;

  @SerializedName("changeVnfFlavourData")
  private List<ChangeVnfFlavourData> changeVnfFlavourData = null;

  @SerializedName("operateVnfData")
  private List<OperateVnfData> operateVnfData = null;

  @SerializedName("modifyVnfInfoData")
  private List<ModifyVnfInfoData> modifyVnfInfoData = null;

  @SerializedName("changeExtVnfConnectivityData")
  private List<ChangeExtVnfConnectivityData> changeExtVnfConnectivityData = null;

  @SerializedName("addSap")
  private List<SapData> addSap = null;

  @SerializedName("removeSapId")
  private List<String> removeSapId = null;

  @SerializedName("addNestedNsData")
  private List<NestedNsInstanceData> addNestedNsData = null;

  @SerializedName("removeNestedNsId")
  private List<String> removeNestedNsId = null;

  @SerializedName("assocNewNsdVersionData")
  private AssocNewNsdVersionData assocNewNsdVersionData = null;

  @SerializedName("moveVnfInstanceData")
  private List<MoveVnfInstanceData> moveVnfInstanceData = null;

  @SerializedName("addVnffg")
  private List<AddVnffgData> addVnffg = null;

  @SerializedName("removeVnffgId")
  private List<String> removeVnffgId = null;

  @SerializedName("updateVnffg")
  private List<UpdateVnffgData> updateVnffg = null;

  @SerializedName("changeNsFlavourData")
  private ChangeNsFlavourData changeNsFlavourData = null;

  @SerializedName("addPnfData")
  private List<AddPnfData> addPnfData = null;

  @SerializedName("modifyPnfData")
  private List<ModifyPnfData> modifyPnfData = null;

  @SerializedName("removePnfId")
  private List<String> removePnfId = null;

  @SerializedName("updateTime")
  private String updateTime = null;

  public UpdateNsRequest updateType(UpdateTypeEnum updateType) {
    this.updateType = updateType;
    return this;
  }

   /**
   * The type of update. It determines also which one of the following parameters is present in the operation. Possible values include: * ADD_VNF: Adding existing VNF instance(s) * REMOVE_VNF: Removing VNF instance(s) * INSTANTIATE_VNF: Instantiating new VNF(s) * CHANGE_VNF_DF: Changing VNF DF * OPERATE_VNF: Changing VNF state, * MODIFY_VNF_INFORMATION: Modifying VNF information and/or the configurable properties of VNF instance(s) * CHANGE_EXTERNAL_VNF_CONNECTIVITY: Changing the external connectivity of VNF instance(s)ADD_SAP: Adding SAP(s) * REMOVE_SAP: Removing SAP(s) * ADD_NESTED_NS: Adding existing NS instance(s) as nested NS(s) * REMOVE_NESTED_NS: Removing existing nested NS instance(s) * ASSOC_NEW_NSD_VERSION: Associating a new NSD version to the NS instance * MOVE_VNF: Moving VNF instance(s) from one origin NS instance to another target NS instance * ADD_VNFFG: Adding VNFFG(s) * REMOVE_VNFFG: Removing VNFFG(s) * UPDATE_VNFFG: Updating VNFFG(s) * CHANGE_NS_DF: Changing NS DF * ADD_PNF: Adding PNF * MODIFY_PNF: Modifying PNF * REMOVE_PNF: Removing PNF 
   * @return updateType
  **/
  @ApiModelProperty(required = true, value = "The type of update. It determines also which one of the following parameters is present in the operation. Possible values include: * ADD_VNF: Adding existing VNF instance(s) * REMOVE_VNF: Removing VNF instance(s) * INSTANTIATE_VNF: Instantiating new VNF(s) * CHANGE_VNF_DF: Changing VNF DF * OPERATE_VNF: Changing VNF state, * MODIFY_VNF_INFORMATION: Modifying VNF information and/or the configurable properties of VNF instance(s) * CHANGE_EXTERNAL_VNF_CONNECTIVITY: Changing the external connectivity of VNF instance(s)ADD_SAP: Adding SAP(s) * REMOVE_SAP: Removing SAP(s) * ADD_NESTED_NS: Adding existing NS instance(s) as nested NS(s) * REMOVE_NESTED_NS: Removing existing nested NS instance(s) * ASSOC_NEW_NSD_VERSION: Associating a new NSD version to the NS instance * MOVE_VNF: Moving VNF instance(s) from one origin NS instance to another target NS instance * ADD_VNFFG: Adding VNFFG(s) * REMOVE_VNFFG: Removing VNFFG(s) * UPDATE_VNFFG: Updating VNFFG(s) * CHANGE_NS_DF: Changing NS DF * ADD_PNF: Adding PNF * MODIFY_PNF: Modifying PNF * REMOVE_PNF: Removing PNF ")
  public UpdateTypeEnum getUpdateType() {
    return updateType;
  }

  public void setUpdateType(UpdateTypeEnum updateType) {
    this.updateType = updateType;
  }

  public UpdateNsRequest addVnfIstance(List<VnfInstanceData> addVnfIstance) {
    this.addVnfIstance = addVnfIstance;
    return this;
  }

  public UpdateNsRequest addAddVnfIstanceItem(VnfInstanceData addVnfIstanceItem) {
    if (this.addVnfIstance == null) {
      this.addVnfIstance = new ArrayList<VnfInstanceData>();
    }
    this.addVnfIstance.add(addVnfIstanceItem);
    return this;
  }

   /**
   * Identifies an existing VNF instance to be added to the NS instance. It shall be present only if updateType &#x3D; \&quot;ADD_VNF\&quot;. 
   * @return addVnfIstance
  **/
  @ApiModelProperty(value = "Identifies an existing VNF instance to be added to the NS instance. It shall be present only if updateType = \"ADD_VNF\". ")
  public List<VnfInstanceData> getAddVnfIstance() {
    return addVnfIstance;
  }

  public void setAddVnfIstance(List<VnfInstanceData> addVnfIstance) {
    this.addVnfIstance = addVnfIstance;
  }

  public UpdateNsRequest removeVnfInstanceId(List<String> removeVnfInstanceId) {
    this.removeVnfInstanceId = removeVnfInstanceId;
    return this;
  }

  public UpdateNsRequest addRemoveVnfInstanceIdItem(String removeVnfInstanceIdItem) {
    if (this.removeVnfInstanceId == null) {
      this.removeVnfInstanceId = new ArrayList<String>();
    }
    this.removeVnfInstanceId.add(removeVnfInstanceIdItem);
    return this;
  }

   /**
   * Identifies an existing VNF instance to be removed from the NS instance. It contains the identifier(s) of the VNF instances to be removed. It shall be present only if updateType &#x3D; \&quot;REMOVE_VNF.\&quot; Note: If a VNF instance is removed from a NS and this NS was the last one for which this VNF instance was a part, the VNF instance is terminated by the NFVO. 
   * @return removeVnfInstanceId
  **/
  @ApiModelProperty(value = "Identifies an existing VNF instance to be removed from the NS instance. It contains the identifier(s) of the VNF instances to be removed. It shall be present only if updateType = \"REMOVE_VNF.\" Note: If a VNF instance is removed from a NS and this NS was the last one for which this VNF instance was a part, the VNF instance is terminated by the NFVO. ")
  public List<String> getRemoveVnfInstanceId() {
    return removeVnfInstanceId;
  }

  public void setRemoveVnfInstanceId(List<String> removeVnfInstanceId) {
    this.removeVnfInstanceId = removeVnfInstanceId;
  }

  public UpdateNsRequest instantiateVnfData(List<InstantiateVnfData> instantiateVnfData) {
    this.instantiateVnfData = instantiateVnfData;
    return this;
  }

  public UpdateNsRequest addInstantiateVnfDataItem(InstantiateVnfData instantiateVnfDataItem) {
    if (this.instantiateVnfData == null) {
      this.instantiateVnfData = new ArrayList<InstantiateVnfData>();
    }
    this.instantiateVnfData.add(instantiateVnfDataItem);
    return this;
  }

   /**
   * Identifies the new VNF to be instantiated. It can be used e.g. for the bottom-up NS creation. It shall be present only if updateType &#x3D; \&quot;INSTANTIATE_VNF\&quot;. 
   * @return instantiateVnfData
  **/
  @ApiModelProperty(value = "Identifies the new VNF to be instantiated. It can be used e.g. for the bottom-up NS creation. It shall be present only if updateType = \"INSTANTIATE_VNF\". ")
  public List<InstantiateVnfData> getInstantiateVnfData() {
    return instantiateVnfData;
  }

  public void setInstantiateVnfData(List<InstantiateVnfData> instantiateVnfData) {
    this.instantiateVnfData = instantiateVnfData;
  }

  public UpdateNsRequest changeVnfFlavourData(List<ChangeVnfFlavourData> changeVnfFlavourData) {
    this.changeVnfFlavourData = changeVnfFlavourData;
    return this;
  }

  public UpdateNsRequest addChangeVnfFlavourDataItem(ChangeVnfFlavourData changeVnfFlavourDataItem) {
    if (this.changeVnfFlavourData == null) {
      this.changeVnfFlavourData = new ArrayList<ChangeVnfFlavourData>();
    }
    this.changeVnfFlavourData.add(changeVnfFlavourDataItem);
    return this;
  }

   /**
   * Identifies the new DF of the VNF instance to be changed to. It shall be present only if updateType &#x3D; \&quot;CHANGE_VNF_DF\&quot;. 
   * @return changeVnfFlavourData
  **/
  @ApiModelProperty(value = "Identifies the new DF of the VNF instance to be changed to. It shall be present only if updateType = \"CHANGE_VNF_DF\". ")
  public List<ChangeVnfFlavourData> getChangeVnfFlavourData() {
    return changeVnfFlavourData;
  }

  public void setChangeVnfFlavourData(List<ChangeVnfFlavourData> changeVnfFlavourData) {
    this.changeVnfFlavourData = changeVnfFlavourData;
  }

  public UpdateNsRequest operateVnfData(List<OperateVnfData> operateVnfData) {
    this.operateVnfData = operateVnfData;
    return this;
  }

  public UpdateNsRequest addOperateVnfDataItem(OperateVnfData operateVnfDataItem) {
    if (this.operateVnfData == null) {
      this.operateVnfData = new ArrayList<OperateVnfData>();
    }
    this.operateVnfData.add(operateVnfDataItem);
    return this;
  }

   /**
   * Identifies the state of the VNF instance to be changed. It shall be present only if updateType &#x3D; \&quot;OPERATE_VNF\&quot;. 
   * @return operateVnfData
  **/
  @ApiModelProperty(value = "Identifies the state of the VNF instance to be changed. It shall be present only if updateType = \"OPERATE_VNF\". ")
  public List<OperateVnfData> getOperateVnfData() {
    return operateVnfData;
  }

  public void setOperateVnfData(List<OperateVnfData> operateVnfData) {
    this.operateVnfData = operateVnfData;
  }

  public UpdateNsRequest modifyVnfInfoData(List<ModifyVnfInfoData> modifyVnfInfoData) {
    this.modifyVnfInfoData = modifyVnfInfoData;
    return this;
  }

  public UpdateNsRequest addModifyVnfInfoDataItem(ModifyVnfInfoData modifyVnfInfoDataItem) {
    if (this.modifyVnfInfoData == null) {
      this.modifyVnfInfoData = new ArrayList<ModifyVnfInfoData>();
    }
    this.modifyVnfInfoData.add(modifyVnfInfoDataItem);
    return this;
  }

   /**
   * Identifies the VNF information parameters and/or the configurable properties of VNF instance to be modified. It shall be present only if updateType &#x3D; \&quot;MODIFY_VNF_INFORMATION\&quot;. 
   * @return modifyVnfInfoData
  **/
  @ApiModelProperty(value = "Identifies the VNF information parameters and/or the configurable properties of VNF instance to be modified. It shall be present only if updateType = \"MODIFY_VNF_INFORMATION\". ")
  public List<ModifyVnfInfoData> getModifyVnfInfoData() {
    return modifyVnfInfoData;
  }

  public void setModifyVnfInfoData(List<ModifyVnfInfoData> modifyVnfInfoData) {
    this.modifyVnfInfoData = modifyVnfInfoData;
  }

  public UpdateNsRequest changeExtVnfConnectivityData(List<ChangeExtVnfConnectivityData> changeExtVnfConnectivityData) {
    this.changeExtVnfConnectivityData = changeExtVnfConnectivityData;
    return this;
  }

  public UpdateNsRequest addChangeExtVnfConnectivityDataItem(ChangeExtVnfConnectivityData changeExtVnfConnectivityDataItem) {
    if (this.changeExtVnfConnectivityData == null) {
      this.changeExtVnfConnectivityData = new ArrayList<ChangeExtVnfConnectivityData>();
    }
    this.changeExtVnfConnectivityData.add(changeExtVnfConnectivityDataItem);
    return this;
  }

   /**
   * Specifies the new external connectivity data of the VNF instance to be changed. It shall be present only if updateType &#x3D; \&quot;CHANGE_EXTERNAL_VNF_CONNECTIVITY\&quot;. 
   * @return changeExtVnfConnectivityData
  **/
  @ApiModelProperty(value = "Specifies the new external connectivity data of the VNF instance to be changed. It shall be present only if updateType = \"CHANGE_EXTERNAL_VNF_CONNECTIVITY\". ")
  public List<ChangeExtVnfConnectivityData> getChangeExtVnfConnectivityData() {
    return changeExtVnfConnectivityData;
  }

  public void setChangeExtVnfConnectivityData(List<ChangeExtVnfConnectivityData> changeExtVnfConnectivityData) {
    this.changeExtVnfConnectivityData = changeExtVnfConnectivityData;
  }

  public UpdateNsRequest addSap(List<SapData> addSap) {
    this.addSap = addSap;
    return this;
  }

  public UpdateNsRequest addAddSapItem(SapData addSapItem) {
    if (this.addSap == null) {
      this.addSap = new ArrayList<SapData>();
    }
    this.addSap.add(addSapItem);
    return this;
  }

   /**
   * Identifies a new SAP to be added to the NS instance. It shall be present only if updateType &#x3D; \&quot;ADD_SAP.\&quot; 
   * @return addSap
  **/
  @ApiModelProperty(value = "Identifies a new SAP to be added to the NS instance. It shall be present only if updateType = \"ADD_SAP.\" ")
  public List<SapData> getAddSap() {
    return addSap;
  }

  public void setAddSap(List<SapData> addSap) {
    this.addSap = addSap;
  }

  public UpdateNsRequest removeSapId(List<String> removeSapId) {
    this.removeSapId = removeSapId;
    return this;
  }

  public UpdateNsRequest addRemoveSapIdItem(String removeSapIdItem) {
    if (this.removeSapId == null) {
      this.removeSapId = new ArrayList<String>();
    }
    this.removeSapId.add(removeSapIdItem);
    return this;
  }

   /**
   * The identifier an existing SAP to be removed from the NS instance. It shall be present only if updateType &#x3D; \&quot;REMOVE_SAP.\&quot; 
   * @return removeSapId
  **/
  @ApiModelProperty(value = "The identifier an existing SAP to be removed from the NS instance. It shall be present only if updateType = \"REMOVE_SAP.\" ")
  public List<String> getRemoveSapId() {
    return removeSapId;
  }

  public void setRemoveSapId(List<String> removeSapId) {
    this.removeSapId = removeSapId;
  }

  public UpdateNsRequest addNestedNsData(List<NestedNsInstanceData> addNestedNsData) {
    this.addNestedNsData = addNestedNsData;
    return this;
  }

  public UpdateNsRequest addAddNestedNsDataItem(NestedNsInstanceData addNestedNsDataItem) {
    if (this.addNestedNsData == null) {
      this.addNestedNsData = new ArrayList<NestedNsInstanceData>();
    }
    this.addNestedNsData.add(addNestedNsDataItem);
    return this;
  }

   /**
   * The identifier of an existing nested NS instance to be added to (nested within) the NS instance. It shall be present only if updateType &#x3D; \&quot;ADD_NESTED_NS\&quot;. 
   * @return addNestedNsData
  **/
  @ApiModelProperty(value = "The identifier of an existing nested NS instance to be added to (nested within) the NS instance. It shall be present only if updateType = \"ADD_NESTED_NS\". ")
  public List<NestedNsInstanceData> getAddNestedNsData() {
    return addNestedNsData;
  }

  public void setAddNestedNsData(List<NestedNsInstanceData> addNestedNsData) {
    this.addNestedNsData = addNestedNsData;
  }

  public UpdateNsRequest removeNestedNsId(List<String> removeNestedNsId) {
    this.removeNestedNsId = removeNestedNsId;
    return this;
  }

  public UpdateNsRequest addRemoveNestedNsIdItem(String removeNestedNsIdItem) {
    if (this.removeNestedNsId == null) {
      this.removeNestedNsId = new ArrayList<String>();
    }
    this.removeNestedNsId.add(removeNestedNsIdItem);
    return this;
  }

   /**
   * The identifier of an existing nested NS instance to be removed from the NS instance. It shall be present only if updateType &#x3D; \&quot;REMOVE_NESTED_NS\&quot;. 
   * @return removeNestedNsId
  **/
  @ApiModelProperty(value = "The identifier of an existing nested NS instance to be removed from the NS instance. It shall be present only if updateType = \"REMOVE_NESTED_NS\". ")
  public List<String> getRemoveNestedNsId() {
    return removeNestedNsId;
  }

  public void setRemoveNestedNsId(List<String> removeNestedNsId) {
    this.removeNestedNsId = removeNestedNsId;
  }

  public UpdateNsRequest assocNewNsdVersionData(AssocNewNsdVersionData assocNewNsdVersionData) {
    this.assocNewNsdVersionData = assocNewNsdVersionData;
    return this;
  }

   /**
   * Specify the new NSD to be used for the NS instance. It shall be present only if updateType &#x3D; ASSOC_NEW_NSD_VERSION\&quot;. 
   * @return assocNewNsdVersionData
  **/
  @ApiModelProperty(value = "Specify the new NSD to be used for the NS instance. It shall be present only if updateType = ASSOC_NEW_NSD_VERSION\". ")
  public AssocNewNsdVersionData getAssocNewNsdVersionData() {
    return assocNewNsdVersionData;
  }

  public void setAssocNewNsdVersionData(AssocNewNsdVersionData assocNewNsdVersionData) {
    this.assocNewNsdVersionData = assocNewNsdVersionData;
  }

  public UpdateNsRequest moveVnfInstanceData(List<MoveVnfInstanceData> moveVnfInstanceData) {
    this.moveVnfInstanceData = moveVnfInstanceData;
    return this;
  }

  public UpdateNsRequest addMoveVnfInstanceDataItem(MoveVnfInstanceData moveVnfInstanceDataItem) {
    if (this.moveVnfInstanceData == null) {
      this.moveVnfInstanceData = new ArrayList<MoveVnfInstanceData>();
    }
    this.moveVnfInstanceData.add(moveVnfInstanceDataItem);
    return this;
  }

   /**
   * Specify existing VNF instance to be moved from one NS instance to another NS instance. It shall be present only if updateType &#x3D; MOVE_VNF\&quot;. 
   * @return moveVnfInstanceData
  **/
  @ApiModelProperty(value = "Specify existing VNF instance to be moved from one NS instance to another NS instance. It shall be present only if updateType = MOVE_VNF\". ")
  public List<MoveVnfInstanceData> getMoveVnfInstanceData() {
    return moveVnfInstanceData;
  }

  public void setMoveVnfInstanceData(List<MoveVnfInstanceData> moveVnfInstanceData) {
    this.moveVnfInstanceData = moveVnfInstanceData;
  }

  public UpdateNsRequest addVnffg(List<AddVnffgData> addVnffg) {
    this.addVnffg = addVnffg;
    return this;
  }

  public UpdateNsRequest addAddVnffgItem(AddVnffgData addVnffgItem) {
    if (this.addVnffg == null) {
      this.addVnffg = new ArrayList<AddVnffgData>();
    }
    this.addVnffg.add(addVnffgItem);
    return this;
  }

   /**
   * Specify the new VNFFG to be created to the NS Instance. It shall be present only if updateType &#x3D; \&quot;ADD_VNFFG\&quot;. 
   * @return addVnffg
  **/
  @ApiModelProperty(value = "Specify the new VNFFG to be created to the NS Instance. It shall be present only if updateType = \"ADD_VNFFG\". ")
  public List<AddVnffgData> getAddVnffg() {
    return addVnffg;
  }

  public void setAddVnffg(List<AddVnffgData> addVnffg) {
    this.addVnffg = addVnffg;
  }

  public UpdateNsRequest removeVnffgId(List<String> removeVnffgId) {
    this.removeVnffgId = removeVnffgId;
    return this;
  }

  public UpdateNsRequest addRemoveVnffgIdItem(String removeVnffgIdItem) {
    if (this.removeVnffgId == null) {
      this.removeVnffgId = new ArrayList<String>();
    }
    this.removeVnffgId.add(removeVnffgIdItem);
    return this;
  }

   /**
   * Identifier of an existing VNFFG to be removed from the NS Instance. It shall be present only if updateType &#x3D; \&quot;REMOVE_VNFFG\&quot;. 
   * @return removeVnffgId
  **/
  @ApiModelProperty(value = "Identifier of an existing VNFFG to be removed from the NS Instance. It shall be present only if updateType = \"REMOVE_VNFFG\". ")
  public List<String> getRemoveVnffgId() {
    return removeVnffgId;
  }

  public void setRemoveVnffgId(List<String> removeVnffgId) {
    this.removeVnffgId = removeVnffgId;
  }

  public UpdateNsRequest updateVnffg(List<UpdateVnffgData> updateVnffg) {
    this.updateVnffg = updateVnffg;
    return this;
  }

  public UpdateNsRequest addUpdateVnffgItem(UpdateVnffgData updateVnffgItem) {
    if (this.updateVnffg == null) {
      this.updateVnffg = new ArrayList<UpdateVnffgData>();
    }
    this.updateVnffg.add(updateVnffgItem);
    return this;
  }

   /**
   * Specify the new VNFFG Information data to be updated for a VNFFG of the NS Instance. It shall be present only if updateType &#x3D; \&quot;UPDATE_VNFFG\&quot;. 
   * @return updateVnffg
  **/
  @ApiModelProperty(value = "Specify the new VNFFG Information data to be updated for a VNFFG of the NS Instance. It shall be present only if updateType = \"UPDATE_VNFFG\". ")
  public List<UpdateVnffgData> getUpdateVnffg() {
    return updateVnffg;
  }

  public void setUpdateVnffg(List<UpdateVnffgData> updateVnffg) {
    this.updateVnffg = updateVnffg;
  }

  public UpdateNsRequest changeNsFlavourData(ChangeNsFlavourData changeNsFlavourData) {
    this.changeNsFlavourData = changeNsFlavourData;
    return this;
  }

   /**
   * Specifies the new DF to be applied to the NS instance. It shall be present only if updateType &#x3D; \&quot;CHANGE_NS_DF\&quot;. 
   * @return changeNsFlavourData
  **/
  @ApiModelProperty(value = "Specifies the new DF to be applied to the NS instance. It shall be present only if updateType = \"CHANGE_NS_DF\". ")
  public ChangeNsFlavourData getChangeNsFlavourData() {
    return changeNsFlavourData;
  }

  public void setChangeNsFlavourData(ChangeNsFlavourData changeNsFlavourData) {
    this.changeNsFlavourData = changeNsFlavourData;
  }

  public UpdateNsRequest addPnfData(List<AddPnfData> addPnfData) {
    this.addPnfData = addPnfData;
    return this;
  }

  public UpdateNsRequest addAddPnfDataItem(AddPnfData addPnfDataItem) {
    if (this.addPnfData == null) {
      this.addPnfData = new ArrayList<AddPnfData>();
    }
    this.addPnfData.add(addPnfDataItem);
    return this;
  }

   /**
   * specifies the PNF to be added into the NS instance. It shall be present only if updateType &#x3D; \&quot;ADD_PNF\&quot;. 
   * @return addPnfData
  **/
  @ApiModelProperty(value = "specifies the PNF to be added into the NS instance. It shall be present only if updateType = \"ADD_PNF\". ")
  public List<AddPnfData> getAddPnfData() {
    return addPnfData;
  }

  public void setAddPnfData(List<AddPnfData> addPnfData) {
    this.addPnfData = addPnfData;
  }

  public UpdateNsRequest modifyPnfData(List<ModifyPnfData> modifyPnfData) {
    this.modifyPnfData = modifyPnfData;
    return this;
  }

  public UpdateNsRequest addModifyPnfDataItem(ModifyPnfData modifyPnfDataItem) {
    if (this.modifyPnfData == null) {
      this.modifyPnfData = new ArrayList<ModifyPnfData>();
    }
    this.modifyPnfData.add(modifyPnfDataItem);
    return this;
  }

   /**
   * Specifies the PNF to be modified in the NS instance. It shall be present only if updateType &#x3D; \&quot;MODIFY_PNF\&quot;. 
   * @return modifyPnfData
  **/
  @ApiModelProperty(value = "Specifies the PNF to be modified in the NS instance. It shall be present only if updateType = \"MODIFY_PNF\". ")
  public List<ModifyPnfData> getModifyPnfData() {
    return modifyPnfData;
  }

  public void setModifyPnfData(List<ModifyPnfData> modifyPnfData) {
    this.modifyPnfData = modifyPnfData;
  }

  public UpdateNsRequest removePnfId(List<String> removePnfId) {
    this.removePnfId = removePnfId;
    return this;
  }

  public UpdateNsRequest addRemovePnfIdItem(String removePnfIdItem) {
    if (this.removePnfId == null) {
      this.removePnfId = new ArrayList<String>();
    }
    this.removePnfId.add(removePnfIdItem);
    return this;
  }

   /**
   * Identifier of the PNF to be deleted from the NS instance. It shall be present only if updateType &#x3D; \&quot;REMOVE_PNF\&quot;. 
   * @return removePnfId
  **/
  @ApiModelProperty(value = "Identifier of the PNF to be deleted from the NS instance. It shall be present only if updateType = \"REMOVE_PNF\". ")
  public List<String> getRemovePnfId() {
    return removePnfId;
  }

  public void setRemovePnfId(List<String> removePnfId) {
    this.removePnfId = removePnfId;
  }

  public UpdateNsRequest updateTime(String updateTime) {
    this.updateTime = updateTime;
    return this;
  }

   /**
   * Timestamp indicating the update time of the NS, i.e. the NS will be updated at this timestamp. Cardinality \&quot;0\&quot; indicates the NS update takes place immediately. 
   * @return updateTime
  **/
  @ApiModelProperty(value = "Timestamp indicating the update time of the NS, i.e. the NS will be updated at this timestamp. Cardinality \"0\" indicates the NS update takes place immediately. ")
  public String getUpdateTime() {
    return updateTime;
  }

  public void setUpdateTime(String updateTime) {
    this.updateTime = updateTime;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UpdateNsRequest updateNsRequest = (UpdateNsRequest) o;
    return Objects.equals(this.updateType, updateNsRequest.updateType) &&
        Objects.equals(this.addVnfIstance, updateNsRequest.addVnfIstance) &&
        Objects.equals(this.removeVnfInstanceId, updateNsRequest.removeVnfInstanceId) &&
        Objects.equals(this.instantiateVnfData, updateNsRequest.instantiateVnfData) &&
        Objects.equals(this.changeVnfFlavourData, updateNsRequest.changeVnfFlavourData) &&
        Objects.equals(this.operateVnfData, updateNsRequest.operateVnfData) &&
        Objects.equals(this.modifyVnfInfoData, updateNsRequest.modifyVnfInfoData) &&
        Objects.equals(this.changeExtVnfConnectivityData, updateNsRequest.changeExtVnfConnectivityData) &&
        Objects.equals(this.addSap, updateNsRequest.addSap) &&
        Objects.equals(this.removeSapId, updateNsRequest.removeSapId) &&
        Objects.equals(this.addNestedNsData, updateNsRequest.addNestedNsData) &&
        Objects.equals(this.removeNestedNsId, updateNsRequest.removeNestedNsId) &&
        Objects.equals(this.assocNewNsdVersionData, updateNsRequest.assocNewNsdVersionData) &&
        Objects.equals(this.moveVnfInstanceData, updateNsRequest.moveVnfInstanceData) &&
        Objects.equals(this.addVnffg, updateNsRequest.addVnffg) &&
        Objects.equals(this.removeVnffgId, updateNsRequest.removeVnffgId) &&
        Objects.equals(this.updateVnffg, updateNsRequest.updateVnffg) &&
        Objects.equals(this.changeNsFlavourData, updateNsRequest.changeNsFlavourData) &&
        Objects.equals(this.addPnfData, updateNsRequest.addPnfData) &&
        Objects.equals(this.modifyPnfData, updateNsRequest.modifyPnfData) &&
        Objects.equals(this.removePnfId, updateNsRequest.removePnfId) &&
        Objects.equals(this.updateTime, updateNsRequest.updateTime);
  }

  @Override
  public int hashCode() {
    return Objects.hash(updateType, addVnfIstance, removeVnfInstanceId, instantiateVnfData, changeVnfFlavourData, operateVnfData, modifyVnfInfoData, changeExtVnfConnectivityData, addSap, removeSapId, addNestedNsData, removeNestedNsId, assocNewNsdVersionData, moveVnfInstanceData, addVnffg, removeVnffgId, updateVnffg, changeNsFlavourData, addPnfData, modifyPnfData, removePnfId, updateTime);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UpdateNsRequest {\n");
    
    sb.append("    updateType: ").append(toIndentedString(updateType)).append("\n");
    sb.append("    addVnfIstance: ").append(toIndentedString(addVnfIstance)).append("\n");
    sb.append("    removeVnfInstanceId: ").append(toIndentedString(removeVnfInstanceId)).append("\n");
    sb.append("    instantiateVnfData: ").append(toIndentedString(instantiateVnfData)).append("\n");
    sb.append("    changeVnfFlavourData: ").append(toIndentedString(changeVnfFlavourData)).append("\n");
    sb.append("    operateVnfData: ").append(toIndentedString(operateVnfData)).append("\n");
    sb.append("    modifyVnfInfoData: ").append(toIndentedString(modifyVnfInfoData)).append("\n");
    sb.append("    changeExtVnfConnectivityData: ").append(toIndentedString(changeExtVnfConnectivityData)).append("\n");
    sb.append("    addSap: ").append(toIndentedString(addSap)).append("\n");
    sb.append("    removeSapId: ").append(toIndentedString(removeSapId)).append("\n");
    sb.append("    addNestedNsData: ").append(toIndentedString(addNestedNsData)).append("\n");
    sb.append("    removeNestedNsId: ").append(toIndentedString(removeNestedNsId)).append("\n");
    sb.append("    assocNewNsdVersionData: ").append(toIndentedString(assocNewNsdVersionData)).append("\n");
    sb.append("    moveVnfInstanceData: ").append(toIndentedString(moveVnfInstanceData)).append("\n");
    sb.append("    addVnffg: ").append(toIndentedString(addVnffg)).append("\n");
    sb.append("    removeVnffgId: ").append(toIndentedString(removeVnffgId)).append("\n");
    sb.append("    updateVnffg: ").append(toIndentedString(updateVnffg)).append("\n");
    sb.append("    changeNsFlavourData: ").append(toIndentedString(changeNsFlavourData)).append("\n");
    sb.append("    addPnfData: ").append(toIndentedString(addPnfData)).append("\n");
    sb.append("    modifyPnfData: ").append(toIndentedString(modifyPnfData)).append("\n");
    sb.append("    removePnfId: ").append(toIndentedString(removePnfId)).append("\n");
    sb.append("    updateTime: ").append(toIndentedString(updateTime)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

